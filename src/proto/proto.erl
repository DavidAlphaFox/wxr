%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.9
-module(proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_msgID/1, enum_value_by_symbol_msgID/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("proto.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'msgID'() :: 'none' | 'c_get_player_id' | 's_get_player_id' | 'c_login' | 's_login' | 's_globle_goal' | 'c_heart' | 's_heart' | 'c_finish_cg' | 'c_finish_tip' | 'c_player_info' | 's_player_info' | 'c_buy_pi_fu' | 's_buy_pi_fu' | 'c_change_pi_fu' | 's_change_pi_fu' | 'c_goal_reward' | 's_goal_reward' | 'c_get_goal_reward' | 's_get_goal_reward' | 'c_single_game' | 's_single_game' | 'c_single_game_end' | 's_single_game_end' | 'c_single_game_tip' | 'c_rank_info' | 's_rank_info' | 'c_friend_battle_invite' | 's_friend_battle_invite' | 'c_match_battle' | 's_battle_start' | 'c_catch_mark' | 'c_miss_mark' | 'c_use_skill' | 's_use_skill' | 's_score_change' | 's_hp_change' | 's_battle_end' | 'c_battle_info' | 's_battle_info'.
-export_type(['msgID'/0]).

%% message types
-type s_player_info() :: #s_player_info{}.
-type s_heart() :: #s_heart{}.
-type c_rank_info() :: #c_rank_info{}.
-type s_hp_change() :: #s_hp_change{}.
-type c_buy_pi_fu() :: #c_buy_pi_fu{}.
-type c_get_player_id() :: #c_get_player_id{}.
-type c_miss_mark() :: #c_miss_mark{}.
-type c_player_info() :: #c_player_info{}.
-type s_battle_start() :: #s_battle_start{}.
-type s_score_change() :: #s_score_change{}.
-type p_star_info() :: #p_star_info{}.
-type s_battle_info() :: #s_battle_info{}.
-type c_single_game() :: #c_single_game{}.
-type c_finish_tip() :: #c_finish_tip{}.
-type s_single_game() :: #s_single_game{}.
-type s_globle_goal() :: #s_globle_goal{}.
-type s_single_game_end() :: #s_single_game_end{}.
-type c_battle_info() :: #c_battle_info{}.
-type c_match_battle() :: #c_match_battle{}.
-type c_single_game_tip() :: #c_single_game_tip{}.
-type c_catch_mark() :: #c_catch_mark{}.
-type s_goal_reward() :: #s_goal_reward{}.
-type c_single_game_end() :: #c_single_game_end{}.
-type s_get_player_id() :: #s_get_player_id{}.
-type s_get_goal_reward() :: #s_get_goal_reward{}.
-type c_change_pi_fu() :: #c_change_pi_fu{}.
-type s_change_pi_fu() :: #s_change_pi_fu{}.
-type c_heart() :: #c_heart{}.
-type p_rank() :: #p_rank{}.
-type s_rank_info() :: #s_rank_info{}.
-type c_goal_reward() :: #c_goal_reward{}.
-type s_battle_end() :: #s_battle_end{}.
-type c_friend_battle_invite() :: #c_friend_battle_invite{}.
-type c_use_skill() :: #c_use_skill{}.
-type c_finish_cg() :: #c_finish_cg{}.
-type s_use_skill() :: #s_use_skill{}.
-type s_login() :: #s_login{}.
-type s_friend_battle_invite() :: #s_friend_battle_invite{}.
-type s_buy_pi_fu() :: #s_buy_pi_fu{}.
-type c_login() :: #c_login{}.
-type c_get_goal_reward() :: #c_get_goal_reward{}.
-export_type(['s_player_info'/0, 's_heart'/0, 'c_rank_info'/0, 's_hp_change'/0, 'c_buy_pi_fu'/0, 'c_get_player_id'/0, 'c_miss_mark'/0, 'c_player_info'/0, 's_battle_start'/0, 's_score_change'/0, 'p_star_info'/0, 's_battle_info'/0, 'c_single_game'/0, 'c_finish_tip'/0, 's_single_game'/0, 's_globle_goal'/0, 's_single_game_end'/0, 'c_battle_info'/0, 'c_match_battle'/0, 'c_single_game_tip'/0, 'c_catch_mark'/0, 's_goal_reward'/0, 'c_single_game_end'/0, 's_get_player_id'/0, 's_get_goal_reward'/0, 'c_change_pi_fu'/0, 's_change_pi_fu'/0, 'c_heart'/0, 'p_rank'/0, 's_rank_info'/0, 'c_goal_reward'/0, 's_battle_end'/0, 'c_friend_battle_invite'/0, 'c_use_skill'/0, 'c_finish_cg'/0, 's_use_skill'/0, 's_login'/0, 's_friend_battle_invite'/0, 's_buy_pi_fu'/0, 'c_login'/0, 'c_get_goal_reward'/0]).

-spec encode_msg(#s_player_info{} | #s_heart{} | #c_rank_info{} | #s_hp_change{} | #c_buy_pi_fu{} | #c_get_player_id{} | #c_miss_mark{} | #c_player_info{} | #s_battle_start{} | #s_score_change{} | #p_star_info{} | #s_battle_info{} | #c_single_game{} | #c_finish_tip{} | #s_single_game{} | #s_globle_goal{} | #s_single_game_end{} | #c_battle_info{} | #c_match_battle{} | #c_single_game_tip{} | #c_catch_mark{} | #s_goal_reward{} | #c_single_game_end{} | #s_get_player_id{} | #s_get_goal_reward{} | #c_change_pi_fu{} | #s_change_pi_fu{} | #c_heart{} | #p_rank{} | #s_rank_info{} | #c_goal_reward{} | #s_battle_end{} | #c_friend_battle_invite{} | #c_use_skill{} | #c_finish_cg{} | #s_use_skill{} | #s_login{} | #s_friend_battle_invite{} | #s_buy_pi_fu{} | #c_login{} | #c_get_goal_reward{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#s_player_info{} | #s_heart{} | #c_rank_info{} | #s_hp_change{} | #c_buy_pi_fu{} | #c_get_player_id{} | #c_miss_mark{} | #c_player_info{} | #s_battle_start{} | #s_score_change{} | #p_star_info{} | #s_battle_info{} | #c_single_game{} | #c_finish_tip{} | #s_single_game{} | #s_globle_goal{} | #s_single_game_end{} | #c_battle_info{} | #c_match_battle{} | #c_single_game_tip{} | #c_catch_mark{} | #s_goal_reward{} | #c_single_game_end{} | #s_get_player_id{} | #s_get_goal_reward{} | #c_change_pi_fu{} | #s_change_pi_fu{} | #c_heart{} | #p_rank{} | #s_rank_info{} | #c_goal_reward{} | #s_battle_end{} | #c_friend_battle_invite{} | #c_use_skill{} | #c_finish_cg{} | #s_use_skill{} | #s_login{} | #s_friend_battle_invite{} | #s_buy_pi_fu{} | #c_login{} | #c_get_goal_reward{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #s_player_info{} ->
	  e_msg_s_player_info(Msg, TrUserData);
      #s_heart{} -> e_msg_s_heart(Msg, TrUserData);
      #c_rank_info{} -> e_msg_c_rank_info(Msg, TrUserData);
      #s_hp_change{} -> e_msg_s_hp_change(Msg, TrUserData);
      #c_buy_pi_fu{} -> e_msg_c_buy_pi_fu(Msg, TrUserData);
      #c_get_player_id{} ->
	  e_msg_c_get_player_id(Msg, TrUserData);
      #c_miss_mark{} -> e_msg_c_miss_mark(Msg, TrUserData);
      #c_player_info{} ->
	  e_msg_c_player_info(Msg, TrUserData);
      #s_battle_start{} ->
	  e_msg_s_battle_start(Msg, TrUserData);
      #s_score_change{} ->
	  e_msg_s_score_change(Msg, TrUserData);
      #p_star_info{} -> e_msg_p_star_info(Msg, TrUserData);
      #s_battle_info{} ->
	  e_msg_s_battle_info(Msg, TrUserData);
      #c_single_game{} ->
	  e_msg_c_single_game(Msg, TrUserData);
      #c_finish_tip{} -> e_msg_c_finish_tip(Msg, TrUserData);
      #s_single_game{} ->
	  e_msg_s_single_game(Msg, TrUserData);
      #s_globle_goal{} ->
	  e_msg_s_globle_goal(Msg, TrUserData);
      #s_single_game_end{} ->
	  e_msg_s_single_game_end(Msg, TrUserData);
      #c_battle_info{} ->
	  e_msg_c_battle_info(Msg, TrUserData);
      #c_match_battle{} ->
	  e_msg_c_match_battle(Msg, TrUserData);
      #c_single_game_tip{} ->
	  e_msg_c_single_game_tip(Msg, TrUserData);
      #c_catch_mark{} -> e_msg_c_catch_mark(Msg, TrUserData);
      #s_goal_reward{} ->
	  e_msg_s_goal_reward(Msg, TrUserData);
      #c_single_game_end{} ->
	  e_msg_c_single_game_end(Msg, TrUserData);
      #s_get_player_id{} ->
	  e_msg_s_get_player_id(Msg, TrUserData);
      #s_get_goal_reward{} ->
	  e_msg_s_get_goal_reward(Msg, TrUserData);
      #c_change_pi_fu{} ->
	  e_msg_c_change_pi_fu(Msg, TrUserData);
      #s_change_pi_fu{} ->
	  e_msg_s_change_pi_fu(Msg, TrUserData);
      #c_heart{} -> e_msg_c_heart(Msg, TrUserData);
      #p_rank{} -> e_msg_p_rank(Msg, TrUserData);
      #s_rank_info{} -> e_msg_s_rank_info(Msg, TrUserData);
      #c_goal_reward{} ->
	  e_msg_c_goal_reward(Msg, TrUserData);
      #s_battle_end{} -> e_msg_s_battle_end(Msg, TrUserData);
      #c_friend_battle_invite{} ->
	  e_msg_c_friend_battle_invite(Msg, TrUserData);
      #c_use_skill{} -> e_msg_c_use_skill(Msg, TrUserData);
      #c_finish_cg{} -> e_msg_c_finish_cg(Msg, TrUserData);
      #s_use_skill{} -> e_msg_s_use_skill(Msg, TrUserData);
      #s_login{} -> e_msg_s_login(Msg, TrUserData);
      #s_friend_battle_invite{} ->
	  e_msg_s_friend_battle_invite(Msg, TrUserData);
      #s_buy_pi_fu{} -> e_msg_s_buy_pi_fu(Msg, TrUserData);
      #c_login{} -> e_msg_c_login(Msg, TrUserData);
      #c_get_goal_reward{} ->
	  e_msg_c_get_goal_reward(Msg, TrUserData)
    end.



e_msg_s_player_info(Msg, TrUserData) ->
    e_msg_s_player_info(Msg, <<>>, TrUserData).


e_msg_s_player_info(#s_player_info{total_exp = F1,
				   cur_pi_fu = F2, have_pi_fu = F3, skills = F4,
				   gold = F5},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_s_player_info_have_pi_fu(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_s_player_info_skills(TrF4, B3, TrUserData)
	   end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_varint(TrF5, <<B4/binary, 40>>)
    end.

e_msg_s_heart(_Msg, _TrUserData) -> <<>>.

e_msg_c_rank_info(Msg, TrUserData) ->
    e_msg_c_rank_info(Msg, <<>>, TrUserData).


e_msg_c_rank_info(#c_rank_info{tag = F1, rank = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_s_hp_change(Msg, TrUserData) ->
    e_msg_s_hp_change(Msg, <<>>, TrUserData).


e_msg_s_hp_change(#s_hp_change{id = F1, hp = F2}, Bin,
		  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_c_buy_pi_fu(Msg, TrUserData) ->
    e_msg_c_buy_pi_fu(Msg, <<>>, TrUserData).


e_msg_c_buy_pi_fu(#c_buy_pi_fu{pi_fu = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_c_get_player_id(Msg, TrUserData) ->
    e_msg_c_get_player_id(Msg, <<>>, TrUserData).


e_msg_c_get_player_id(#c_get_player_id{code = F1}, Bin,
		      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_c_miss_mark(_Msg, _TrUserData) -> <<>>.

e_msg_c_player_info(_Msg, _TrUserData) -> <<>>.

e_msg_s_battle_start(Msg, TrUserData) ->
    e_msg_s_battle_start(Msg, <<>>, TrUserData).


e_msg_s_battle_start(#s_battle_start{target_id = F1,
				     target_star = F2, hp = F3,
				     target_name = F4, target_head = F5,
				     target_gender = F6},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_string(TrF6, <<B5/binary, 50>>)
    end.

e_msg_s_score_change(Msg, TrUserData) ->
    e_msg_s_score_change(Msg, <<>>, TrUserData).


e_msg_s_score_change(#s_score_change{score = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_p_star_info(Msg, TrUserData) ->
    e_msg_p_star_info(Msg, <<>>, TrUserData).


e_msg_p_star_info(#p_star_info{star_lv = F1,
			       count = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_s_battle_info(Msg, TrUserData) ->
    e_msg_s_battle_info(Msg, <<>>, TrUserData).


e_msg_s_battle_info(#s_battle_info{status = F1,
				   time = F2, fight_count = F3, add_second = F4,
				   info = F5, match_second = F6},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_varint(TrF4, <<B3/binary, 32>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true -> e_field_s_battle_info_info(TrF5, B4, TrUserData)
	   end
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_varint(TrF6, <<B5/binary, 48>>)
    end.

e_msg_c_single_game(_Msg, _TrUserData) -> <<>>.

e_msg_c_finish_tip(_Msg, _TrUserData) -> <<>>.

e_msg_s_single_game(Msg, TrUserData) ->
    e_msg_s_single_game(Msg, <<>>, TrUserData).


e_msg_s_single_game(#s_single_game{stage = F1,
				   skill = F2, is_load_tip = F3,
				   cur_pi_fu = F4},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_varint(TrF4, <<B3/binary, 32>>)
    end.

e_msg_s_globle_goal(Msg, TrUserData) ->
    e_msg_s_globle_goal(Msg, <<>>, TrUserData).


e_msg_s_globle_goal(#s_globle_goal{save_total = F1,
				   need_save = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_s_single_game_end(Msg, TrUserData) ->
    e_msg_s_single_game_end(Msg, <<>>, TrUserData).


e_msg_s_single_game_end(#s_single_game_end{result = F1,
					   is_first = F2, total_score = F3,
					   total_exp = F4},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_varint(TrF4, <<B3/binary, 32>>)
    end.

e_msg_c_battle_info(_Msg, _TrUserData) -> <<>>.

e_msg_c_match_battle(_Msg, _TrUserData) -> <<>>.

e_msg_c_single_game_tip(_Msg, _TrUserData) -> <<>>.

e_msg_c_catch_mark(Msg, TrUserData) ->
    e_msg_c_catch_mark(Msg, <<>>, TrUserData).


e_msg_c_catch_mark(#c_catch_mark{combo = F1,
				 big_skill = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_s_goal_reward(Msg, TrUserData) ->
    e_msg_s_goal_reward(Msg, <<>>, TrUserData).


e_msg_s_goal_reward(#s_goal_reward{can_reward = F1,
				   geted_reward = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_s_goal_reward_can_reward(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_s_goal_reward_geted_reward(TrF2, B1, TrUserData)
      end
    end.

e_msg_c_single_game_end(Msg, TrUserData) ->
    e_msg_c_single_game_end(Msg, <<>>, TrUserData).


e_msg_c_single_game_end(#c_single_game_end{score = F1,
					   exp = F2, gold = F3},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_varint(TrF3, <<B2/binary, 24>>)
    end.

e_msg_s_get_player_id(Msg, TrUserData) ->
    e_msg_s_get_player_id(Msg, <<>>, TrUserData).


e_msg_s_get_player_id(#s_get_player_id{player_id = F1},
		      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_s_get_goal_reward(Msg, TrUserData) ->
    e_msg_s_get_goal_reward(Msg, <<>>, TrUserData).


e_msg_s_get_goal_reward(#s_get_goal_reward{reward_id =
					       F1,
					   result = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_c_change_pi_fu(Msg, TrUserData) ->
    e_msg_c_change_pi_fu(Msg, <<>>, TrUserData).


e_msg_c_change_pi_fu(#c_change_pi_fu{pi_fu = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_s_change_pi_fu(Msg, TrUserData) ->
    e_msg_s_change_pi_fu(Msg, <<>>, TrUserData).


e_msg_s_change_pi_fu(#s_change_pi_fu{pi_fu = F1,
				     result = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_c_heart(_Msg, _TrUserData) -> <<>>.

e_msg_p_rank(Msg, TrUserData) ->
    e_msg_p_rank(Msg, <<>>, TrUserData).


e_msg_p_rank(#p_rank{key = F1, value = F2, rank = F3,
		     title = F4, name = F5, head = F6, gender = F7},
	     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_varint(TrF4, <<B3/binary, 32>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_string(TrF6, <<B5/binary, 50>>)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_string(TrF7, <<B6/binary, 58>>)
    end.

e_msg_s_rank_info(Msg, TrUserData) ->
    e_msg_s_rank_info(Msg, <<>>, TrUserData).


e_msg_s_rank_info(#s_rank_info{tag = F1,
			       rank_info = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_s_rank_info_rank_info(TrF2, B1, TrUserData)
      end
    end.

e_msg_c_goal_reward(_Msg, _TrUserData) -> <<>>.

e_msg_s_battle_end(Msg, TrUserData) ->
    e_msg_s_battle_end(Msg, <<>>, TrUserData).


e_msg_s_battle_end(#s_battle_end{battle_result = F1,
				 star = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_c_friend_battle_invite(_Msg, _TrUserData) -> <<>>.

e_msg_c_use_skill(Msg, TrUserData) ->
    e_msg_c_use_skill(Msg, <<>>, TrUserData).


e_msg_c_use_skill(#c_use_skill{skill = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_c_finish_cg(_Msg, _TrUserData) -> <<>>.

e_msg_s_use_skill(Msg, TrUserData) ->
    e_msg_s_use_skill(Msg, <<>>, TrUserData).


e_msg_s_use_skill(#s_use_skill{id = F1, skill = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_s_login(Msg, TrUserData) ->
    e_msg_s_login(Msg, <<>>, TrUserData).


e_msg_s_login(#s_login{player_id = F1, is_load_cg = F2,
		       is_load_tip = F3},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_varint(TrF3, <<B2/binary, 24>>)
    end.

e_msg_s_friend_battle_invite(Msg, TrUserData) ->
    e_msg_s_friend_battle_invite(Msg, <<>>, TrUserData).


e_msg_s_friend_battle_invite(#s_friend_battle_invite{result
							 = F1,
						     invite_code = F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_s_buy_pi_fu(Msg, TrUserData) ->
    e_msg_s_buy_pi_fu(Msg, <<>>, TrUserData).


e_msg_s_buy_pi_fu(#s_buy_pi_fu{pi_fu = F1, result = F2},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_c_login(Msg, TrUserData) ->
    e_msg_c_login(Msg, <<>>, TrUserData).


e_msg_c_login(#c_login{player_id = F1, name = F2,
		       head = F3, gender = F4, city = F5, province = F6,
		       country = F7},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_string(TrF6, <<B5/binary, 50>>)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_string(TrF7, <<B6/binary, 58>>)
    end.

e_msg_c_get_goal_reward(Msg, TrUserData) ->
    e_msg_c_get_goal_reward(Msg, <<>>, TrUserData).


e_msg_c_get_goal_reward(#c_get_goal_reward{reward_id =
					       F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_field_s_player_info_have_pi_fu([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 24>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_s_player_info_have_pi_fu(Rest, Bin3,
				     TrUserData);
e_field_s_player_info_have_pi_fu([], Bin,
				 _TrUserData) ->
    Bin.

e_field_s_player_info_skills([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 32>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_s_player_info_skills(Rest, Bin3, TrUserData);
e_field_s_player_info_skills([], Bin, _TrUserData) ->
    Bin.

e_mfield_s_battle_info_info(Msg, Bin, TrUserData) ->
    SubBin = e_msg_p_star_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_s_battle_info_info([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_s_battle_info_info(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_s_battle_info_info(Rest, Bin3, TrUserData);
e_field_s_battle_info_info([], Bin, _TrUserData) -> Bin.

e_field_s_goal_reward_can_reward([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_s_goal_reward_can_reward(Rest, Bin3,
				     TrUserData);
e_field_s_goal_reward_can_reward([], Bin,
				 _TrUserData) ->
    Bin.

e_field_s_goal_reward_geted_reward([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2),
    e_field_s_goal_reward_geted_reward(Rest, Bin3,
				       TrUserData);
e_field_s_goal_reward_geted_reward([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_s_rank_info_rank_info(Msg, Bin, TrUserData) ->
    SubBin = e_msg_p_rank(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_s_rank_info_rank_info([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_s_rank_info_rank_info(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_s_rank_info_rank_info(Rest, Bin3, TrUserData);
e_field_s_rank_info_rank_info([], Bin, _TrUserData) ->
    Bin.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_FUNCTION_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit(s_player_info, Bin, TrUserData) ->
    d_msg_s_player_info(Bin, TrUserData);
decode_msg_2_doit(s_heart, Bin, TrUserData) ->
    d_msg_s_heart(Bin, TrUserData);
decode_msg_2_doit(c_rank_info, Bin, TrUserData) ->
    d_msg_c_rank_info(Bin, TrUserData);
decode_msg_2_doit(s_hp_change, Bin, TrUserData) ->
    d_msg_s_hp_change(Bin, TrUserData);
decode_msg_2_doit(c_buy_pi_fu, Bin, TrUserData) ->
    d_msg_c_buy_pi_fu(Bin, TrUserData);
decode_msg_2_doit(c_get_player_id, Bin, TrUserData) ->
    d_msg_c_get_player_id(Bin, TrUserData);
decode_msg_2_doit(c_miss_mark, Bin, TrUserData) ->
    d_msg_c_miss_mark(Bin, TrUserData);
decode_msg_2_doit(c_player_info, Bin, TrUserData) ->
    d_msg_c_player_info(Bin, TrUserData);
decode_msg_2_doit(s_battle_start, Bin, TrUserData) ->
    d_msg_s_battle_start(Bin, TrUserData);
decode_msg_2_doit(s_score_change, Bin, TrUserData) ->
    d_msg_s_score_change(Bin, TrUserData);
decode_msg_2_doit(p_star_info, Bin, TrUserData) ->
    d_msg_p_star_info(Bin, TrUserData);
decode_msg_2_doit(s_battle_info, Bin, TrUserData) ->
    d_msg_s_battle_info(Bin, TrUserData);
decode_msg_2_doit(c_single_game, Bin, TrUserData) ->
    d_msg_c_single_game(Bin, TrUserData);
decode_msg_2_doit(c_finish_tip, Bin, TrUserData) ->
    d_msg_c_finish_tip(Bin, TrUserData);
decode_msg_2_doit(s_single_game, Bin, TrUserData) ->
    d_msg_s_single_game(Bin, TrUserData);
decode_msg_2_doit(s_globle_goal, Bin, TrUserData) ->
    d_msg_s_globle_goal(Bin, TrUserData);
decode_msg_2_doit(s_single_game_end, Bin, TrUserData) ->
    d_msg_s_single_game_end(Bin, TrUserData);
decode_msg_2_doit(c_battle_info, Bin, TrUserData) ->
    d_msg_c_battle_info(Bin, TrUserData);
decode_msg_2_doit(c_match_battle, Bin, TrUserData) ->
    d_msg_c_match_battle(Bin, TrUserData);
decode_msg_2_doit(c_single_game_tip, Bin, TrUserData) ->
    d_msg_c_single_game_tip(Bin, TrUserData);
decode_msg_2_doit(c_catch_mark, Bin, TrUserData) ->
    d_msg_c_catch_mark(Bin, TrUserData);
decode_msg_2_doit(s_goal_reward, Bin, TrUserData) ->
    d_msg_s_goal_reward(Bin, TrUserData);
decode_msg_2_doit(c_single_game_end, Bin, TrUserData) ->
    d_msg_c_single_game_end(Bin, TrUserData);
decode_msg_2_doit(s_get_player_id, Bin, TrUserData) ->
    d_msg_s_get_player_id(Bin, TrUserData);
decode_msg_2_doit(s_get_goal_reward, Bin, TrUserData) ->
    d_msg_s_get_goal_reward(Bin, TrUserData);
decode_msg_2_doit(c_change_pi_fu, Bin, TrUserData) ->
    d_msg_c_change_pi_fu(Bin, TrUserData);
decode_msg_2_doit(s_change_pi_fu, Bin, TrUserData) ->
    d_msg_s_change_pi_fu(Bin, TrUserData);
decode_msg_2_doit(c_heart, Bin, TrUserData) ->
    d_msg_c_heart(Bin, TrUserData);
decode_msg_2_doit(p_rank, Bin, TrUserData) ->
    d_msg_p_rank(Bin, TrUserData);
decode_msg_2_doit(s_rank_info, Bin, TrUserData) ->
    d_msg_s_rank_info(Bin, TrUserData);
decode_msg_2_doit(c_goal_reward, Bin, TrUserData) ->
    d_msg_c_goal_reward(Bin, TrUserData);
decode_msg_2_doit(s_battle_end, Bin, TrUserData) ->
    d_msg_s_battle_end(Bin, TrUserData);
decode_msg_2_doit(c_friend_battle_invite, Bin,
		  TrUserData) ->
    d_msg_c_friend_battle_invite(Bin, TrUserData);
decode_msg_2_doit(c_use_skill, Bin, TrUserData) ->
    d_msg_c_use_skill(Bin, TrUserData);
decode_msg_2_doit(c_finish_cg, Bin, TrUserData) ->
    d_msg_c_finish_cg(Bin, TrUserData);
decode_msg_2_doit(s_use_skill, Bin, TrUserData) ->
    d_msg_s_use_skill(Bin, TrUserData);
decode_msg_2_doit(s_login, Bin, TrUserData) ->
    d_msg_s_login(Bin, TrUserData);
decode_msg_2_doit(s_friend_battle_invite, Bin,
		  TrUserData) ->
    d_msg_s_friend_battle_invite(Bin, TrUserData);
decode_msg_2_doit(s_buy_pi_fu, Bin, TrUserData) ->
    d_msg_s_buy_pi_fu(Bin, TrUserData);
decode_msg_2_doit(c_login, Bin, TrUserData) ->
    d_msg_c_login(Bin, TrUserData);
decode_msg_2_doit(c_get_goal_reward, Bin, TrUserData) ->
    d_msg_c_get_goal_reward(Bin, TrUserData).



d_msg_s_player_info(Bin, TrUserData) ->
    dfp_read_field_def_s_player_info(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id([], TrUserData), id([], TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_player_info(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_s_player_info_total_exp(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_s_player_info(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_s_player_info_cur_pi_fu(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_s_player_info(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_pfield_s_player_info_have_pi_fu(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_s_player_info(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_s_player_info_have_pi_fu(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_s_player_info(<<34, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_pfield_s_player_info_skills(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_s_player_info(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_s_player_info_skills(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_s_player_info(<<40, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_s_player_info_gold(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_s_player_info(<<>>, 0, 0, F@_1, F@_2,
				 R1, R2, F@_5, TrUserData) ->
    #s_player_info{total_exp = F@_1, cur_pi_fu = F@_2,
		   have_pi_fu = lists_reverse(R1, TrUserData),
		   skills = lists_reverse(R2, TrUserData), gold = F@_5};
dfp_read_field_def_s_player_info(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_s_player_info(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_s_player_info(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_player_info(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
dg_read_field_def_s_player_info(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_player_info_total_exp(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_s_player_info_cur_pi_fu(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_pfield_s_player_info_have_pi_fu(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_s_player_info_have_pi_fu(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_pfield_s_player_info_skills(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_s_player_info_skills(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_s_player_info_gold(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_player_info(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_s_player_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_s_player_info(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    3 ->
		skip_group_s_player_info(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_s_player_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_s_player_info(<<>>, 0, 0, F@_1, F@_2,
				R1, R2, F@_5, TrUserData) ->
    #s_player_info{total_exp = F@_1, cur_pi_fu = F@_2,
		   have_pi_fu = lists_reverse(R1, TrUserData),
		   skills = lists_reverse(R2, TrUserData), gold = F@_5}.

d_field_s_player_info_total_exp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_s_player_info_total_exp(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_s_player_info_total_exp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_player_info(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_s_player_info_cur_pi_fu(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_s_player_info_cur_pi_fu(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_s_player_info_cur_pi_fu(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_player_info(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_s_player_info_have_pi_fu(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_s_player_info_have_pi_fu(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_s_player_info_have_pi_fu(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_player_info(RestF, 0, 0, F@_1,
				     F@_2, cons(NewFValue, Prev, TrUserData),
				     F@_4, F@_5, TrUserData).

d_pfield_s_player_info_have_pi_fu(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_pfield_s_player_info_have_pi_fu(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_pfield_s_player_info_have_pi_fu(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, E, F@_4, F@_5,
				  TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_s_player_info_have_pi_fu(PackedBytes, 0,
						0, E),
    dfp_read_field_def_s_player_info(Rest2, 0, 0, F@_1,
				     F@_2, NewSeq, F@_4, F@_5, TrUserData).

d_packed_field_s_player_info_have_pi_fu(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_s_player_info_have_pi_fu(Rest, N + 7,
					    X bsl N + Acc, AccSeq);
d_packed_field_s_player_info_have_pi_fu(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_s_player_info_have_pi_fu(RestF, 0, 0,
					    [NewFValue | AccSeq]);
d_packed_field_s_player_info_have_pi_fu(<<>>, 0, 0,
					AccSeq) ->
    AccSeq.

d_field_s_player_info_skills(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_s_player_info_skills(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_s_player_info_skills(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
			     TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_player_info(RestF, 0, 0, F@_1,
				     F@_2, F@_3,
				     cons(NewFValue, Prev, TrUserData), F@_5,
				     TrUserData).

d_pfield_s_player_info_skills(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_pfield_s_player_info_skills(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_pfield_s_player_info_skills(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, E, F@_5, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_s_player_info_skills(PackedBytes, 0, 0,
					    E),
    dfp_read_field_def_s_player_info(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, NewSeq, F@_5, TrUserData).

d_packed_field_s_player_info_skills(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_s_player_info_skills(Rest, N + 7,
					X bsl N + Acc, AccSeq);
d_packed_field_s_player_info_skills(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_s_player_info_skills(RestF, 0, 0,
					[NewFValue | AccSeq]);
d_packed_field_s_player_info_skills(<<>>, 0, 0,
				    AccSeq) ->
    AccSeq.

d_field_s_player_info_gold(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_s_player_info_gold(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_s_player_info_gold(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_player_info(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_s_player_info(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_s_player_info(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
skip_varint_s_player_info(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_s_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_s_player_info(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_s_player_info(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
skip_length_delimited_s_player_info(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_player_info(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_s_player_info(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_player_info(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_s_player_info(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_s_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_s_player_info(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_s_player_info(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

d_msg_s_heart(Bin, TrUserData) ->
    dfp_read_field_def_s_heart(Bin, 0, 0, TrUserData).

dfp_read_field_def_s_heart(<<>>, 0, 0, _) -> #s_heart{};
dfp_read_field_def_s_heart(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_s_heart(Other, Z1, Z2, TrUserData).

dg_read_field_def_s_heart(<<1:1, X:7, Rest/binary>>, N,
			  Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_heart(Rest, N + 7, X bsl N + Acc,
			      TrUserData);
dg_read_field_def_s_heart(<<0:1, X:7, Rest/binary>>, N,
			  Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_s_heart(Rest, 0, 0, TrUserData);
      1 -> skip_64_s_heart(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_s_heart(Rest, 0, 0, TrUserData);
      3 -> skip_group_s_heart(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_s_heart(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_s_heart(<<>>, 0, 0, _) -> #s_heart{}.

skip_varint_s_heart(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    skip_varint_s_heart(Rest, Z1, Z2, TrUserData);
skip_varint_s_heart(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_s_heart(Rest, Z1, Z2, TrUserData).

skip_length_delimited_s_heart(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_heart(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
skip_length_delimited_s_heart(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_heart(Rest2, 0, 0, TrUserData).

skip_group_s_heart(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_heart(Rest, 0, Z2, TrUserData).

skip_32_s_heart(<<_:32, Rest/binary>>, Z1, Z2,
		TrUserData) ->
    dfp_read_field_def_s_heart(Rest, Z1, Z2, TrUserData).

skip_64_s_heart(<<_:64, Rest/binary>>, Z1, Z2,
		TrUserData) ->
    dfp_read_field_def_s_heart(Rest, Z1, Z2, TrUserData).

d_msg_c_rank_info(Bin, TrUserData) ->
    dfp_read_field_def_c_rank_info(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_rank_info(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_c_rank_info_tag(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_c_rank_info(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_c_rank_info_rank(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_c_rank_info(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #c_rank_info{tag = F@_1, rank = F@_2};
dfp_read_field_def_c_rank_info(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_c_rank_info(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_c_rank_info(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_rank_info(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_c_rank_info(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_c_rank_info_tag(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_c_rank_info_rank(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_rank_info(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_c_rank_info(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_c_rank_info(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_c_rank_info(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_c_rank_info(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_c_rank_info(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #c_rank_info{tag = F@_1, rank = F@_2}.

d_field_c_rank_info_tag(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_rank_info_tag(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_c_rank_info_tag(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_rank_info(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_c_rank_info_rank(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_rank_info_rank(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_c_rank_info_rank(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_rank_info(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_c_rank_info(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_c_rank_info(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_c_rank_info(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_c_rank_info(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_rank_info(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_c_rank_info(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_rank_info(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_c_rank_info(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_rank_info(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_c_rank_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_c_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_c_rank_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_c_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_s_hp_change(Bin, TrUserData) ->
    dfp_read_field_def_s_hp_change(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_hp_change(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_hp_change_id(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_s_hp_change(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_hp_change_hp(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_s_hp_change(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #s_hp_change{id = F@_1, hp = F@_2};
dfp_read_field_def_s_hp_change(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_s_hp_change(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_s_hp_change(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_hp_change(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_hp_change(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_hp_change_id(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      16 ->
	  d_field_s_hp_change_hp(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_hp_change(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_s_hp_change(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_s_hp_change(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_s_hp_change(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_s_hp_change(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_s_hp_change(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #s_hp_change{id = F@_1, hp = F@_2}.

d_field_s_hp_change_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_hp_change_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_s_hp_change_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_hp_change(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_s_hp_change_hp(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_hp_change_hp(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_s_hp_change_hp(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_hp_change(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_s_hp_change(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_hp_change(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_s_hp_change(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_hp_change(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_s_hp_change(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_hp_change(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_hp_change(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_hp_change(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_s_hp_change(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_hp_change(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_s_hp_change(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_s_hp_change(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_s_hp_change(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_s_hp_change(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_c_buy_pi_fu(Bin, TrUserData) ->
    dfp_read_field_def_c_buy_pi_fu(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_buy_pi_fu(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_c_buy_pi_fu_pi_fu(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_c_buy_pi_fu(<<>>, 0, 0, F@_1, _) ->
    #c_buy_pi_fu{pi_fu = F@_1};
dfp_read_field_def_c_buy_pi_fu(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_c_buy_pi_fu(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_c_buy_pi_fu(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_buy_pi_fu(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_buy_pi_fu(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_buy_pi_fu_pi_fu(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_buy_pi_fu(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_c_buy_pi_fu(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_buy_pi_fu(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_c_buy_pi_fu(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_c_buy_pi_fu(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_buy_pi_fu(<<>>, 0, 0, F@_1, _) ->
    #c_buy_pi_fu{pi_fu = F@_1}.

d_field_c_buy_pi_fu_pi_fu(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_buy_pi_fu_pi_fu(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_c_buy_pi_fu_pi_fu(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_buy_pi_fu(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_c_buy_pi_fu(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_c_buy_pi_fu(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_c_buy_pi_fu(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_buy_pi_fu(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_c_buy_pi_fu(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_buy_pi_fu(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_buy_pi_fu(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_buy_pi_fu(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_c_buy_pi_fu(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_buy_pi_fu(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_c_buy_pi_fu(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_buy_pi_fu(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_c_buy_pi_fu(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_buy_pi_fu(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_c_get_player_id(Bin, TrUserData) ->
    dfp_read_field_def_c_get_player_id(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_get_player_id(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_c_get_player_id_code(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_c_get_player_id(<<>>, 0, 0, F@_1,
				   _) ->
    #c_get_player_id{code = F@_1};
dfp_read_field_def_c_get_player_id(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_c_get_player_id(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_c_get_player_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_get_player_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_get_player_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_c_get_player_id_code(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_get_player_id(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_c_get_player_id(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_get_player_id(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_c_get_player_id(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_c_get_player_id(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_get_player_id(<<>>, 0, 0, F@_1,
				  _) ->
    #c_get_player_id{code = F@_1}.

d_field_c_get_player_id_code(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_get_player_id_code(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_c_get_player_id_code(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_get_player_id(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_c_get_player_id(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_c_get_player_id(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_c_get_player_id(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_c_get_player_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_get_player_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_get_player_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_get_player_id(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_c_get_player_id(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_get_player_id(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_c_get_player_id(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_c_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_c_get_player_id(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_c_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

d_msg_c_miss_mark(Bin, TrUserData) ->
    dfp_read_field_def_c_miss_mark(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_miss_mark(<<>>, 0, 0, _) ->
    #c_miss_mark{};
dfp_read_field_def_c_miss_mark(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_c_miss_mark(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_c_miss_mark(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_miss_mark(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_c_miss_mark(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_miss_mark(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_miss_mark(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_miss_mark(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_c_miss_mark(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_c_miss_mark(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_miss_mark(<<>>, 0, 0, _) ->
    #c_miss_mark{}.

skip_varint_c_miss_mark(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_c_miss_mark(Rest, Z1, Z2, TrUserData);
skip_varint_c_miss_mark(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_c_miss_mark(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_c_miss_mark(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_miss_mark(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_c_miss_mark(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_miss_mark(Rest2, 0, 0, TrUserData).

skip_group_c_miss_mark(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_miss_mark(Rest, 0, Z2, TrUserData).

skip_32_c_miss_mark(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_c_miss_mark(Rest, Z1, Z2,
				   TrUserData).

skip_64_c_miss_mark(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_c_miss_mark(Rest, Z1, Z2,
				   TrUserData).

d_msg_c_player_info(Bin, TrUserData) ->
    dfp_read_field_def_c_player_info(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_player_info(<<>>, 0, 0, _) ->
    #c_player_info{};
dfp_read_field_def_c_player_info(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_c_player_info(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_c_player_info(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_player_info(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_c_player_info(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_player_info(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_player_info(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_player_info(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_c_player_info(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_c_player_info(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_player_info(<<>>, 0, 0, _) ->
    #c_player_info{}.

skip_varint_c_player_info(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_c_player_info(Rest, Z1, Z2, TrUserData);
skip_varint_c_player_info(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_c_player_info(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_c_player_info(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_player_info(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_c_player_info(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_player_info(Rest2, 0, 0,
				     TrUserData).

skip_group_c_player_info(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_player_info(Rest, 0, Z2,
				     TrUserData).

skip_32_c_player_info(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c_player_info(Rest, Z1, Z2,
				     TrUserData).

skip_64_c_player_info(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c_player_info(Rest, Z1, Z2,
				     TrUserData).

d_msg_s_battle_start(Bin, TrUserData) ->
    dfp_read_field_def_s_battle_start(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_battle_start(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_s_battle_start_target_id(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_s_battle_start(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_s_battle_start_target_star(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
dfp_read_field_def_s_battle_start(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_s_battle_start_hp(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_s_battle_start(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_s_battle_start_target_name(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
dfp_read_field_def_s_battle_start(<<42, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_s_battle_start_target_head(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
dfp_read_field_def_s_battle_start(<<50, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_s_battle_start_target_gender(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6,
					 TrUserData);
dfp_read_field_def_s_battle_start(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #s_battle_start{target_id = F@_1, target_star = F@_2,
		    hp = F@_3, target_name = F@_4, target_head = F@_5,
		    target_gender = F@_6};
dfp_read_field_def_s_battle_start(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_s_battle_start(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_s_battle_start(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_battle_start(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
dg_read_field_def_s_battle_start(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_battle_start_target_id(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, TrUserData);
      16 ->
	  d_field_s_battle_start_target_star(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      24 ->
	  d_field_s_battle_start_hp(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, TrUserData);
      34 ->
	  d_field_s_battle_start_target_name(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      42 ->
	  d_field_s_battle_start_target_head(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      50 ->
	  d_field_s_battle_start_target_gender(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_battle_start(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_s_battle_start(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_s_battle_start(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
	    3 ->
		skip_group_s_battle_start(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
	    5 ->
		skip_32_s_battle_start(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_s_battle_start(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, _) ->
    #s_battle_start{target_id = F@_1, target_star = F@_2,
		    hp = F@_3, target_name = F@_4, target_head = F@_5,
		    target_gender = F@_6}.

d_field_s_battle_start_target_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    d_field_s_battle_start_target_id(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
d_field_s_battle_start_target_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_battle_start(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_s_battle_start_target_star(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    d_field_s_battle_start_target_star(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
d_field_s_battle_start_target_star(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_start(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_s_battle_start_hp(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_s_battle_start_hp(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_s_battle_start_hp(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_start(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_s_battle_start_target_name(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    d_field_s_battle_start_target_name(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
d_field_s_battle_start_target_name(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_battle_start(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, F@_6,
				      TrUserData).

d_field_s_battle_start_target_head(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    d_field_s_battle_start_target_head(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
d_field_s_battle_start_target_head(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_battle_start(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, F@_6,
				      TrUserData).

d_field_s_battle_start_target_gender(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    d_field_s_battle_start_target_gender(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
d_field_s_battle_start_target_gender(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_battle_start(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, NewFValue,
				      TrUserData).

skip_varint_s_battle_start(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    skip_varint_s_battle_start(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_s_battle_start(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_s_battle_start(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_s_battle_start(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_s_battle_start(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
skip_length_delimited_s_battle_start(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_battle_start(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_s_battle_start(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_battle_start(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_s_battle_start(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_s_battle_start(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_s_battle_start(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_s_battle_start(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_msg_s_score_change(Bin, TrUserData) ->
    dfp_read_field_def_s_score_change(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_score_change(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_s_score_change_score(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_s_score_change(<<>>, 0, 0, F@_1,
				  _) ->
    #s_score_change{score = F@_1};
dfp_read_field_def_s_score_change(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_s_score_change(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_s_score_change(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_score_change(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s_score_change(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_score_change_score(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_score_change(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_s_score_change(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_score_change(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_s_score_change(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_s_score_change(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_score_change(<<>>, 0, 0, F@_1, _) ->
    #s_score_change{score = F@_1}.

d_field_s_score_change_score(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_score_change_score(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_s_score_change_score(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_score_change(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_s_score_change(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_s_score_change(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_s_score_change(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s_score_change(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_s_score_change(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_score_change(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_score_change(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_score_change(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_s_score_change(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_score_change(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_s_score_change(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_s_score_change(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_s_score_change(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_s_score_change(Rest, Z1, Z2, F@_1,
				      TrUserData).

d_msg_p_star_info(Bin, TrUserData) ->
    dfp_read_field_def_p_star_info(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_star_info(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_p_star_info_star_lv(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_p_star_info(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_p_star_info_count(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_p_star_info(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #p_star_info{star_lv = F@_1, count = F@_2};
dfp_read_field_def_p_star_info(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_p_star_info(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_p_star_info(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_star_info(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_p_star_info(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_star_info_star_lv(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      16 ->
	  d_field_p_star_info_count(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_star_info(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_p_star_info(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_p_star_info(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_p_star_info(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_p_star_info(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_p_star_info(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #p_star_info{star_lv = F@_1, count = F@_2}.

d_field_p_star_info_star_lv(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_star_info_star_lv(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_p_star_info_star_lv(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_star_info(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_p_star_info_count(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_star_info_count(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_p_star_info_count(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_star_info(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_p_star_info(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_p_star_info(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_p_star_info(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_p_star_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_p_star_info(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_star_info(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_p_star_info(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_star_info(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_p_star_info(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_star_info(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_p_star_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_p_star_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_p_star_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_p_star_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_s_battle_info(Bin, TrUserData) ->
    dfp_read_field_def_s_battle_info(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id([], TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_battle_info(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    d_field_s_battle_info_status(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_s_battle_info(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    d_field_s_battle_info_time(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_s_battle_info(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    d_field_s_battle_info_fight_count(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_s_battle_info(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    d_field_s_battle_info_add_second(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_s_battle_info(<<42, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    d_field_s_battle_info_info(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_s_battle_info(<<48, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    d_field_s_battle_info_match_second(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
dfp_read_field_def_s_battle_info(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, R1, F@_6, TrUserData) ->
    #s_battle_info{status = F@_1, time = F@_2,
		   fight_count = F@_3, add_second = F@_4,
		   info = lists_reverse(R1, TrUserData),
		   match_second = F@_6};
dfp_read_field_def_s_battle_info(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_s_battle_info(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_s_battle_info(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_battle_info(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
dg_read_field_def_s_battle_info(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_battle_info_status(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      16 ->
	  d_field_s_battle_info_time(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_s_battle_info_fight_count(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
      32 ->
	  d_field_s_battle_info_add_second(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, TrUserData);
      42 ->
	  d_field_s_battle_info_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, TrUserData);
      48 ->
	  d_field_s_battle_info_match_second(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_battle_info(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_s_battle_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_s_battle_info(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, TrUserData);
	    3 ->
		skip_group_s_battle_info(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_s_battle_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_s_battle_info(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, R1, F@_6, TrUserData) ->
    #s_battle_info{status = F@_1, time = F@_2,
		   fight_count = F@_3, add_second = F@_4,
		   info = lists_reverse(R1, TrUserData),
		   match_second = F@_6}.

d_field_s_battle_info_status(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_s_battle_info_status(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_s_battle_info_status(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_info(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_s_battle_info_time(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_s_battle_info_time(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_s_battle_info_time(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_info(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, F@_6,
				     TrUserData).

d_field_s_battle_info_fight_count(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData)
    when N < 57 ->
    d_field_s_battle_info_fight_count(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, TrUserData);
d_field_s_battle_info_fight_count(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				  TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_info(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, F@_6,
				     TrUserData).

d_field_s_battle_info_add_second(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    d_field_s_battle_info_add_second(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
d_field_s_battle_info_add_second(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				 TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_info(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, F@_6,
				     TrUserData).

d_field_s_battle_info_info(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_s_battle_info_info(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_s_battle_info_info(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_p_star_info(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_s_battle_info(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4,
				     cons(NewFValue, Prev, TrUserData), F@_6,
				     TrUserData).

d_field_s_battle_info_match_second(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    d_field_s_battle_info_match_second(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
d_field_s_battle_info_match_second(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_info(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, NewFValue,
				     TrUserData).

skip_varint_s_battle_info(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_s_battle_info(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_s_battle_info(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_s_battle_info(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_s_battle_info(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_s_battle_info(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, TrUserData);
skip_length_delimited_s_battle_info(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_battle_info(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_s_battle_info(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_battle_info(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_s_battle_info(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_s_battle_info(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_s_battle_info(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_s_battle_info(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_msg_c_single_game(Bin, TrUserData) ->
    dfp_read_field_def_c_single_game(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_single_game(<<>>, 0, 0, _) ->
    #c_single_game{};
dfp_read_field_def_c_single_game(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_c_single_game(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_c_single_game(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_single_game(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_c_single_game(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_single_game(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_single_game(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_single_game(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_c_single_game(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_c_single_game(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_single_game(<<>>, 0, 0, _) ->
    #c_single_game{}.

skip_varint_c_single_game(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_c_single_game(Rest, Z1, Z2, TrUserData);
skip_varint_c_single_game(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_c_single_game(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_c_single_game(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_single_game(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_c_single_game(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_single_game(Rest2, 0, 0,
				     TrUserData).

skip_group_c_single_game(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_single_game(Rest, 0, Z2,
				     TrUserData).

skip_32_c_single_game(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c_single_game(Rest, Z1, Z2,
				     TrUserData).

skip_64_c_single_game(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c_single_game(Rest, Z1, Z2,
				     TrUserData).

d_msg_c_finish_tip(Bin, TrUserData) ->
    dfp_read_field_def_c_finish_tip(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_finish_tip(<<>>, 0, 0, _) ->
    #c_finish_tip{};
dfp_read_field_def_c_finish_tip(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_c_finish_tip(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_c_finish_tip(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_finish_tip(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_c_finish_tip(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_finish_tip(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_finish_tip(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_finish_tip(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_c_finish_tip(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_c_finish_tip(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_finish_tip(<<>>, 0, 0, _) ->
    #c_finish_tip{}.

skip_varint_c_finish_tip(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_c_finish_tip(Rest, Z1, Z2, TrUserData);
skip_varint_c_finish_tip(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_c_finish_tip(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_c_finish_tip(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_finish_tip(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_c_finish_tip(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_finish_tip(Rest2, 0, 0,
				    TrUserData).

skip_group_c_finish_tip(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_finish_tip(Rest, 0, Z2,
				    TrUserData).

skip_32_c_finish_tip(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_c_finish_tip(Rest, Z1, Z2,
				    TrUserData).

skip_64_c_finish_tip(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_c_finish_tip(Rest, Z1, Z2,
				    TrUserData).

d_msg_s_single_game(Bin, TrUserData) ->
    dfp_read_field_def_s_single_game(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_single_game(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_s_single_game_stage(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_s_single_game(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_s_single_game_skill(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_s_single_game(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_s_single_game_is_load_tip(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_s_single_game(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_s_single_game_cur_pi_fu(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_s_single_game(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #s_single_game{stage = F@_1, skill = F@_2,
		   is_load_tip = F@_3, cur_pi_fu = F@_4};
dfp_read_field_def_s_single_game(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_s_single_game(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_s_single_game(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_single_game(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
dg_read_field_def_s_single_game(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_single_game_stage(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      16 ->
	  d_field_s_single_game_skill(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      24 ->
	  d_field_s_single_game_is_load_tip(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_s_single_game_cur_pi_fu(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_single_game(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    1 ->
		skip_64_s_single_game(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    2 ->
		skip_length_delimited_s_single_game(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    3 ->
		skip_group_s_single_game(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_s_single_game(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData)
	  end
    end;
dg_read_field_def_s_single_game(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, _) ->
    #s_single_game{stage = F@_1, skill = F@_2,
		   is_load_tip = F@_3, cur_pi_fu = F@_4}.

d_field_s_single_game_stage(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_s_single_game_stage(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_s_single_game_stage(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, TrUserData).

d_field_s_single_game_skill(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_s_single_game_skill(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_s_single_game_skill(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, TrUserData).

d_field_s_single_game_is_load_tip(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_s_single_game_is_load_tip(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_s_single_game_is_load_tip(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, TrUserData).

d_field_s_single_game_cur_pi_fu(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_s_single_game_cur_pi_fu(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_s_single_game_cur_pi_fu(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, TrUserData).

skip_varint_s_single_game(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_s_single_game(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
skip_varint_s_single_game(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_s_single_game(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_s_single_game(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_single_game(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
skip_length_delimited_s_single_game(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_single_game(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_group_s_single_game(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_single_game(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_32_s_single_game(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_s_single_game(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_64_s_single_game(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_s_single_game(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

d_msg_s_globle_goal(Bin, TrUserData) ->
    dfp_read_field_def_s_globle_goal(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_globle_goal(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_globle_goal_save_total(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_s_globle_goal(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_globle_goal_need_save(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_s_globle_goal(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #s_globle_goal{save_total = F@_1, need_save = F@_2};
dfp_read_field_def_s_globle_goal(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_s_globle_goal(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_s_globle_goal(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_globle_goal(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_globle_goal(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_globle_goal_save_total(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_s_globle_goal_need_save(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_globle_goal(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_s_globle_goal(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_s_globle_goal(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_s_globle_goal(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_s_globle_goal(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_s_globle_goal(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #s_globle_goal{save_total = F@_1, need_save = F@_2}.

d_field_s_globle_goal_save_total(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_globle_goal_save_total(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_globle_goal_save_total(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_globle_goal(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_s_globle_goal_need_save(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_globle_goal_need_save(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_globle_goal_need_save(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_globle_goal(RestF, 0, 0, F@_1,
				     NewFValue, TrUserData).

skip_varint_s_globle_goal(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_globle_goal(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_s_globle_goal(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_globle_goal(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_s_globle_goal(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_globle_goal(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_globle_goal(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_globle_goal(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_s_globle_goal(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_globle_goal(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_s_globle_goal(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_globle_goal(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_s_globle_goal(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_globle_goal(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

d_msg_s_single_game_end(Bin, TrUserData) ->
    dfp_read_field_def_s_single_game_end(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_single_game_end(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_s_single_game_end_result(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_s_single_game_end(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_s_single_game_end_is_first(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_s_single_game_end(<<24,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_s_single_game_end_total_score(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_s_single_game_end(<<32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_s_single_game_end_total_exp(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_s_single_game_end(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    #s_single_game_end{result = F@_1, is_first = F@_2,
		       total_score = F@_3, total_exp = F@_4};
dfp_read_field_def_s_single_game_end(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_s_single_game_end(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_s_single_game_end(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_single_game_end(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
dg_read_field_def_s_single_game_end(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_single_game_end_result(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      16 ->
	  d_field_s_single_game_end_is_first(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      24 ->
	  d_field_s_single_game_end_total_score(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_s_single_game_end_total_exp(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_single_game_end(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_s_single_game_end(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    2 ->
		skip_length_delimited_s_single_game_end(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
	    3 ->
		skip_group_s_single_game_end(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_s_single_game_end(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData)
	  end
    end;
dg_read_field_def_s_single_game_end(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, _) ->
    #s_single_game_end{result = F@_1, is_first = F@_2,
		       total_score = F@_3, total_exp = F@_4}.

d_field_s_single_game_end_result(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_s_single_game_end_result(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_s_single_game_end_result(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game_end(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4,
					 TrUserData).

d_field_s_single_game_end_is_first(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_s_single_game_end_is_first(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_s_single_game_end_is_first(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game_end(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, TrUserData).

d_field_s_single_game_end_total_score(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_s_single_game_end_total_score(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_s_single_game_end_total_score(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game_end(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, F@_4, TrUserData).

d_field_s_single_game_end_total_exp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_s_single_game_end_total_exp(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
d_field_s_single_game_end_total_exp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_single_game_end(RestF, 0, 0, F@_1,
					 F@_2, F@_3, NewFValue, TrUserData).

skip_varint_s_single_game_end(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_s_single_game_end(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
skip_varint_s_single_game_end(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_s_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_s_single_game_end(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    skip_length_delimited_s_single_game_end(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
skip_length_delimited_s_single_game_end(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_single_game_end(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_group_s_single_game_end(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_single_game_end(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_32_s_single_game_end(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_s_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_64_s_single_game_end(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_s_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

d_msg_c_battle_info(Bin, TrUserData) ->
    dfp_read_field_def_c_battle_info(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_battle_info(<<>>, 0, 0, _) ->
    #c_battle_info{};
dfp_read_field_def_c_battle_info(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_c_battle_info(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_c_battle_info(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_battle_info(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_c_battle_info(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_battle_info(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_battle_info(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_battle_info(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_c_battle_info(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_c_battle_info(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_battle_info(<<>>, 0, 0, _) ->
    #c_battle_info{}.

skip_varint_c_battle_info(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_c_battle_info(Rest, Z1, Z2, TrUserData);
skip_varint_c_battle_info(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_c_battle_info(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_c_battle_info(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_battle_info(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_c_battle_info(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_battle_info(Rest2, 0, 0,
				     TrUserData).

skip_group_c_battle_info(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_battle_info(Rest, 0, Z2,
				     TrUserData).

skip_32_c_battle_info(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c_battle_info(Rest, Z1, Z2,
				     TrUserData).

skip_64_c_battle_info(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c_battle_info(Rest, Z1, Z2,
				     TrUserData).

d_msg_c_match_battle(Bin, TrUserData) ->
    dfp_read_field_def_c_match_battle(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_c_match_battle(<<>>, 0, 0, _) ->
    #c_match_battle{};
dfp_read_field_def_c_match_battle(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_c_match_battle(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_c_match_battle(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_match_battle(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_c_match_battle(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_match_battle(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_match_battle(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_match_battle(Rest, 0, 0,
					       TrUserData);
      3 ->
	  skip_group_c_match_battle(Rest, Key bsr 3, 0,
				    TrUserData);
      5 -> skip_32_c_match_battle(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_match_battle(<<>>, 0, 0, _) ->
    #c_match_battle{}.

skip_varint_c_match_battle(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_c_match_battle(Rest, Z1, Z2, TrUserData);
skip_varint_c_match_battle(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_c_match_battle(Rest, Z1, Z2,
				      TrUserData).

skip_length_delimited_c_match_battle(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_match_battle(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_c_match_battle(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_match_battle(Rest2, 0, 0,
				      TrUserData).

skip_group_c_match_battle(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_match_battle(Rest, 0, Z2,
				      TrUserData).

skip_32_c_match_battle(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_c_match_battle(Rest, Z1, Z2,
				      TrUserData).

skip_64_c_match_battle(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_c_match_battle(Rest, Z1, Z2,
				      TrUserData).

d_msg_c_single_game_tip(Bin, TrUserData) ->
    dfp_read_field_def_c_single_game_tip(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_c_single_game_tip(<<>>, 0, 0, _) ->
    #c_single_game_tip{};
dfp_read_field_def_c_single_game_tip(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_c_single_game_tip(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_c_single_game_tip(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_single_game_tip(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_c_single_game_tip(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_c_single_game_tip(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_single_game_tip(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_single_game_tip(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_c_single_game_tip(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_c_single_game_tip(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_single_game_tip(<<>>, 0, 0, _) ->
    #c_single_game_tip{}.

skip_varint_c_single_game_tip(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_c_single_game_tip(Rest, Z1, Z2, TrUserData);
skip_varint_c_single_game_tip(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_c_single_game_tip(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_c_single_game_tip(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_single_game_tip(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_c_single_game_tip(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_single_game_tip(Rest2, 0, 0,
					 TrUserData).

skip_group_c_single_game_tip(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_single_game_tip(Rest, 0, Z2,
					 TrUserData).

skip_32_c_single_game_tip(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_c_single_game_tip(Rest, Z1, Z2,
					 TrUserData).

skip_64_c_single_game_tip(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_c_single_game_tip(Rest, Z1, Z2,
					 TrUserData).

d_msg_c_catch_mark(Bin, TrUserData) ->
    dfp_read_field_def_c_catch_mark(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_catch_mark(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_c_catch_mark_combo(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_c_catch_mark(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_c_catch_mark_big_skill(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_c_catch_mark(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #c_catch_mark{combo = F@_1, big_skill = F@_2};
dfp_read_field_def_c_catch_mark(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_c_catch_mark(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_c_catch_mark(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_catch_mark(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_c_catch_mark(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_catch_mark_combo(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      16 ->
	  d_field_c_catch_mark_big_skill(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_catch_mark(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_c_catch_mark(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_c_catch_mark(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_c_catch_mark(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_c_catch_mark(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_c_catch_mark(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #c_catch_mark{combo = F@_1, big_skill = F@_2}.

d_field_c_catch_mark_combo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_catch_mark_combo(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_c_catch_mark_combo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_catch_mark(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_c_catch_mark_big_skill(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_c_catch_mark_big_skill(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_c_catch_mark_big_skill(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_catch_mark(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_c_catch_mark(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_c_catch_mark(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_c_catch_mark(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_catch_mark(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_c_catch_mark(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_catch_mark(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_c_catch_mark(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_catch_mark(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_c_catch_mark(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_catch_mark(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_c_catch_mark(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_catch_mark(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_c_catch_mark(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_c_catch_mark(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_s_goal_reward(Bin, TrUserData) ->
    dfp_read_field_def_s_goal_reward(Bin, 0, 0,
				     id([], TrUserData), id([], TrUserData),
				     TrUserData).

dfp_read_field_def_s_goal_reward(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_s_goal_reward_can_reward(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_s_goal_reward(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_goal_reward_can_reward(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_s_goal_reward(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_s_goal_reward_geted_reward(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_s_goal_reward(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_goal_reward_geted_reward(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_s_goal_reward(<<>>, 0, 0, R1, R2,
				 TrUserData) ->
    #s_goal_reward{can_reward =
		       lists_reverse(R1, TrUserData),
		   geted_reward = lists_reverse(R2, TrUserData)};
dfp_read_field_def_s_goal_reward(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_s_goal_reward(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_s_goal_reward(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_goal_reward(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_goal_reward(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_s_goal_reward_can_reward(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      8 ->
	  d_field_s_goal_reward_can_reward(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  d_pfield_s_goal_reward_geted_reward(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  d_field_s_goal_reward_geted_reward(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_goal_reward(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_s_goal_reward(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_s_goal_reward(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_s_goal_reward(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_s_goal_reward(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_s_goal_reward(<<>>, 0, 0, R1, R2,
				TrUserData) ->
    #s_goal_reward{can_reward =
		       lists_reverse(R1, TrUserData),
		   geted_reward = lists_reverse(R2, TrUserData)}.

d_field_s_goal_reward_can_reward(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_goal_reward_can_reward(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_goal_reward_can_reward(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_goal_reward(RestF, 0, 0,
				     cons(NewFValue, Prev, TrUserData), F@_2,
				     TrUserData).

d_pfield_s_goal_reward_can_reward(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_s_goal_reward_can_reward(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_pfield_s_goal_reward_can_reward(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, E, F@_2, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_s_goal_reward_can_reward(PackedBytes, 0,
						0, E),
    dfp_read_field_def_s_goal_reward(Rest2, 0, 0, NewSeq,
				     F@_2, TrUserData).

d_packed_field_s_goal_reward_can_reward(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_s_goal_reward_can_reward(Rest, N + 7,
					    X bsl N + Acc, AccSeq);
d_packed_field_s_goal_reward_can_reward(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_s_goal_reward_can_reward(RestF, 0, 0,
					    [NewFValue | AccSeq]);
d_packed_field_s_goal_reward_can_reward(<<>>, 0, 0,
					AccSeq) ->
    AccSeq.

d_field_s_goal_reward_geted_reward(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_goal_reward_geted_reward(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_goal_reward_geted_reward(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_goal_reward(RestF, 0, 0, F@_1,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

d_pfield_s_goal_reward_geted_reward(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_s_goal_reward_geted_reward(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_pfield_s_goal_reward_geted_reward(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_s_goal_reward_geted_reward(PackedBytes,
						  0, 0, E),
    dfp_read_field_def_s_goal_reward(Rest2, 0, 0, F@_1,
				     NewSeq, TrUserData).

d_packed_field_s_goal_reward_geted_reward(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_s_goal_reward_geted_reward(Rest, N + 7,
					      X bsl N + Acc, AccSeq);
d_packed_field_s_goal_reward_geted_reward(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_s_goal_reward_geted_reward(RestF, 0, 0,
					      [NewFValue | AccSeq]);
d_packed_field_s_goal_reward_geted_reward(<<>>, 0, 0,
					  AccSeq) ->
    AccSeq.

skip_varint_s_goal_reward(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_goal_reward(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_s_goal_reward(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_goal_reward(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_s_goal_reward(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_goal_reward(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_goal_reward(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_goal_reward(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_s_goal_reward(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_goal_reward(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_s_goal_reward(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_goal_reward(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_s_goal_reward(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_goal_reward(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

d_msg_c_single_game_end(Bin, TrUserData) ->
    dfp_read_field_def_c_single_game_end(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_single_game_end(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_c_single_game_end_score(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_c_single_game_end(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_c_single_game_end_exp(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_c_single_game_end(<<24,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_c_single_game_end_gold(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_c_single_game_end(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #c_single_game_end{score = F@_1, exp = F@_2,
		       gold = F@_3};
dfp_read_field_def_c_single_game_end(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_c_single_game_end(Other, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

dg_read_field_def_c_single_game_end(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_single_game_end(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
dg_read_field_def_c_single_game_end(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_single_game_end_score(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      16 ->
	  d_field_c_single_game_end_exp(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      24 ->
	  d_field_c_single_game_end_gold(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_single_game_end(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    1 ->
		skip_64_c_single_game_end(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    2 ->
		skip_length_delimited_c_single_game_end(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    3 ->
		skip_group_c_single_game_end(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_c_single_game_end(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData)
	  end
    end;
dg_read_field_def_c_single_game_end(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    #c_single_game_end{score = F@_1, exp = F@_2,
		       gold = F@_3}.

d_field_c_single_game_end_score(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_c_single_game_end_score(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_c_single_game_end_score(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_single_game_end(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, TrUserData).

d_field_c_single_game_end_exp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_c_single_game_end_exp(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_c_single_game_end_exp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_single_game_end(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, TrUserData).

d_field_c_single_game_end_gold(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_c_single_game_end_gold(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_c_single_game_end_gold(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_single_game_end(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, TrUserData).

skip_varint_c_single_game_end(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_c_single_game_end(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
skip_varint_c_single_game_end(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_c_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_length_delimited_c_single_game_end(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_single_game_end(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
skip_length_delimited_c_single_game_end(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_single_game_end(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, TrUserData).

skip_group_c_single_game_end(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_single_game_end(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_32_c_single_game_end(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_c_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_64_c_single_game_end(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_c_single_game_end(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

d_msg_s_get_player_id(Bin, TrUserData) ->
    dfp_read_field_def_s_get_player_id(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_get_player_id(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_s_get_player_id_player_id(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_s_get_player_id(<<>>, 0, 0, F@_1,
				   _) ->
    #s_get_player_id{player_id = F@_1};
dfp_read_field_def_s_get_player_id(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_s_get_player_id(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_s_get_player_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_get_player_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s_get_player_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_get_player_id_player_id(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_get_player_id(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_s_get_player_id(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s_get_player_id(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_s_get_player_id(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_s_get_player_id(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s_get_player_id(<<>>, 0, 0, F@_1,
				  _) ->
    #s_get_player_id{player_id = F@_1}.

d_field_s_get_player_id_player_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s_get_player_id_player_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_s_get_player_id_player_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_get_player_id(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_s_get_player_id(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_s_get_player_id(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_s_get_player_id(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_s_get_player_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_get_player_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s_get_player_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_get_player_id(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_s_get_player_id(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_get_player_id(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_s_get_player_id(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_s_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_s_get_player_id(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_s_get_player_id(Rest, Z1, Z2, F@_1,
				       TrUserData).

d_msg_s_get_goal_reward(Bin, TrUserData) ->
    dfp_read_field_def_s_get_goal_reward(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_get_goal_reward(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_get_goal_reward_reward_id(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_s_get_goal_reward(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_get_goal_reward_result(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_s_get_goal_reward(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #s_get_goal_reward{reward_id = F@_1, result = F@_2};
dfp_read_field_def_s_get_goal_reward(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_s_get_goal_reward(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_s_get_goal_reward(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_get_goal_reward(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_get_goal_reward(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_get_goal_reward_reward_id(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  d_field_s_get_goal_reward_result(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_get_goal_reward(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_s_get_goal_reward(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_s_get_goal_reward(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_s_get_goal_reward(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_s_get_goal_reward(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_s_get_goal_reward(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #s_get_goal_reward{reward_id = F@_1, result = F@_2}.

d_field_s_get_goal_reward_reward_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_get_goal_reward_reward_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_get_goal_reward_reward_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_get_goal_reward(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_s_get_goal_reward_result(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_get_goal_reward_result(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_get_goal_reward_result(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_get_goal_reward(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_s_get_goal_reward(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_get_goal_reward(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_s_get_goal_reward(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_get_goal_reward(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_s_get_goal_reward(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_get_goal_reward(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_s_get_goal_reward(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_get_goal_reward(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_s_get_goal_reward(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_get_goal_reward(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_s_get_goal_reward(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_get_goal_reward(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_s_get_goal_reward(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_get_goal_reward(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

d_msg_c_change_pi_fu(Bin, TrUserData) ->
    dfp_read_field_def_c_change_pi_fu(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_change_pi_fu(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_c_change_pi_fu_pi_fu(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_c_change_pi_fu(<<>>, 0, 0, F@_1,
				  _) ->
    #c_change_pi_fu{pi_fu = F@_1};
dfp_read_field_def_c_change_pi_fu(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_c_change_pi_fu(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_c_change_pi_fu(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_change_pi_fu(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_change_pi_fu(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_change_pi_fu_pi_fu(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_change_pi_fu(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_c_change_pi_fu(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_change_pi_fu(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_c_change_pi_fu(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_c_change_pi_fu(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_change_pi_fu(<<>>, 0, 0, F@_1, _) ->
    #c_change_pi_fu{pi_fu = F@_1}.

d_field_c_change_pi_fu_pi_fu(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_change_pi_fu_pi_fu(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_c_change_pi_fu_pi_fu(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_change_pi_fu(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_c_change_pi_fu(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_c_change_pi_fu(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_c_change_pi_fu(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_change_pi_fu(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_c_change_pi_fu(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_change_pi_fu(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_change_pi_fu(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_change_pi_fu(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_c_change_pi_fu(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_change_pi_fu(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_c_change_pi_fu(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_c_change_pi_fu(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_c_change_pi_fu(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_c_change_pi_fu(Rest, Z1, Z2, F@_1,
				      TrUserData).

d_msg_s_change_pi_fu(Bin, TrUserData) ->
    dfp_read_field_def_s_change_pi_fu(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_change_pi_fu(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_change_pi_fu_pi_fu(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_s_change_pi_fu(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_change_pi_fu_result(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_s_change_pi_fu(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #s_change_pi_fu{pi_fu = F@_1, result = F@_2};
dfp_read_field_def_s_change_pi_fu(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_s_change_pi_fu(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_s_change_pi_fu(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_change_pi_fu(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_change_pi_fu(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_change_pi_fu_pi_fu(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_s_change_pi_fu_result(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_change_pi_fu(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_s_change_pi_fu(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_s_change_pi_fu(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_s_change_pi_fu(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_s_change_pi_fu(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_s_change_pi_fu(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #s_change_pi_fu{pi_fu = F@_1, result = F@_2}.

d_field_s_change_pi_fu_pi_fu(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_change_pi_fu_pi_fu(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_s_change_pi_fu_pi_fu(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_change_pi_fu(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_s_change_pi_fu_result(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_change_pi_fu_result(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_change_pi_fu_result(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_change_pi_fu(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_s_change_pi_fu(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_change_pi_fu(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_s_change_pi_fu(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_change_pi_fu(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_s_change_pi_fu(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_change_pi_fu(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_change_pi_fu(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_change_pi_fu(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_s_change_pi_fu(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_change_pi_fu(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_s_change_pi_fu(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_change_pi_fu(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_s_change_pi_fu(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_change_pi_fu(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

d_msg_c_heart(Bin, TrUserData) ->
    dfp_read_field_def_c_heart(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_heart(<<>>, 0, 0, _) -> #c_heart{};
dfp_read_field_def_c_heart(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_c_heart(Other, Z1, Z2, TrUserData).

dg_read_field_def_c_heart(<<1:1, X:7, Rest/binary>>, N,
			  Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_heart(Rest, N + 7, X bsl N + Acc,
			      TrUserData);
dg_read_field_def_c_heart(<<0:1, X:7, Rest/binary>>, N,
			  Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_heart(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_heart(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_heart(Rest, 0, 0, TrUserData);
      3 -> skip_group_c_heart(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_c_heart(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_heart(<<>>, 0, 0, _) -> #c_heart{}.

skip_varint_c_heart(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    skip_varint_c_heart(Rest, Z1, Z2, TrUserData);
skip_varint_c_heart(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_c_heart(Rest, Z1, Z2, TrUserData).

skip_length_delimited_c_heart(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_heart(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
skip_length_delimited_c_heart(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_heart(Rest2, 0, 0, TrUserData).

skip_group_c_heart(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_heart(Rest, 0, Z2, TrUserData).

skip_32_c_heart(<<_:32, Rest/binary>>, Z1, Z2,
		TrUserData) ->
    dfp_read_field_def_c_heart(Rest, Z1, Z2, TrUserData).

skip_64_c_heart(<<_:64, Rest/binary>>, Z1, Z2,
		TrUserData) ->
    dfp_read_field_def_c_heart(Rest, Z1, Z2, TrUserData).

d_msg_p_rank(Bin, TrUserData) ->
    dfp_read_field_def_p_rank(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_rank(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_key(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_rank(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_title(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_head(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<58, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_rank_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_rank(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, _) ->
    #p_rank{key = F@_1, value = F@_2, rank = F@_3,
	    title = F@_4, name = F@_5, head = F@_6, gender = F@_7};
dfp_read_field_def_p_rank(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_p_rank(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_p_rank(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_rank(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData);
dg_read_field_def_p_rank(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_rank_key(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, TrUserData);
      16 ->
	  d_field_p_rank_value(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      24 ->
	  d_field_p_rank_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      32 ->
	  d_field_p_rank_title(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_p_rank_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_p_rank_head(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_p_rank_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_p_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_p_rank(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
	    3 ->
		skip_group_p_rank(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_p_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_p_rank(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, _) ->
    #p_rank{key = F@_1, value = F@_2, rank = F@_3,
	    title = F@_4, name = F@_5, head = F@_6, gender = F@_7}.

d_field_p_rank_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_key(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_rank(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_rank_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_value(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_rank_rank(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_rank(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_rank(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_rank_title(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_title(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_title(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_p_rank_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_name(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_p_rank_head(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_head(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_head(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_p_rank_gender(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_rank_gender(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_rank_gender(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_p_rank(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_p_rank(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_p_rank(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
skip_varint_p_rank(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_rank(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_p_rank(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    skip_length_delimited_p_rank(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
skip_length_delimited_p_rank(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_rank(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_p_rank(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_rank(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_p_rank(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_rank(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_p_rank(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_rank(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_msg_s_rank_info(Bin, TrUserData) ->
    dfp_read_field_def_s_rank_info(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id([], TrUserData), TrUserData).

dfp_read_field_def_s_rank_info(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_rank_info_tag(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_s_rank_info(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_rank_info_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_s_rank_info(<<>>, 0, 0, F@_1, R1,
			       TrUserData) ->
    #s_rank_info{tag = F@_1,
		 rank_info = lists_reverse(R1, TrUserData)};
dfp_read_field_def_s_rank_info(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_s_rank_info(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_s_rank_info(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_rank_info(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_rank_info(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_rank_info_tag(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      18 ->
	  d_field_s_rank_info_rank_info(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_rank_info(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_s_rank_info(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_s_rank_info(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_s_rank_info(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_s_rank_info(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_s_rank_info(<<>>, 0, 0, F@_1, R1,
			      TrUserData) ->
    #s_rank_info{tag = F@_1,
		 rank_info = lists_reverse(R1, TrUserData)}.

d_field_s_rank_info_tag(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_rank_info_tag(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_s_rank_info_tag(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_rank_info(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_s_rank_info_rank_info(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_rank_info_rank_info(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_rank_info_rank_info(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_p_rank(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_s_rank_info(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_s_rank_info(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_rank_info(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_s_rank_info(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_s_rank_info(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_rank_info(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_rank_info(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_rank_info(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_s_rank_info(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_rank_info(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_s_rank_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_s_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_s_rank_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_s_rank_info(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_c_goal_reward(Bin, TrUserData) ->
    dfp_read_field_def_c_goal_reward(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_goal_reward(<<>>, 0, 0, _) ->
    #c_goal_reward{};
dfp_read_field_def_c_goal_reward(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_c_goal_reward(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_c_goal_reward(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_goal_reward(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_c_goal_reward(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_goal_reward(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_goal_reward(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_goal_reward(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_c_goal_reward(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_c_goal_reward(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_goal_reward(<<>>, 0, 0, _) ->
    #c_goal_reward{}.

skip_varint_c_goal_reward(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_c_goal_reward(Rest, Z1, Z2, TrUserData);
skip_varint_c_goal_reward(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_c_goal_reward(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_c_goal_reward(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_goal_reward(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_c_goal_reward(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_goal_reward(Rest2, 0, 0,
				     TrUserData).

skip_group_c_goal_reward(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_goal_reward(Rest, 0, Z2,
				     TrUserData).

skip_32_c_goal_reward(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c_goal_reward(Rest, Z1, Z2,
				     TrUserData).

skip_64_c_goal_reward(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c_goal_reward(Rest, Z1, Z2,
				     TrUserData).

d_msg_s_battle_end(Bin, TrUserData) ->
    dfp_read_field_def_s_battle_end(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_battle_end(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_battle_end_battle_result(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_s_battle_end(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_battle_end_star(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_s_battle_end(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #s_battle_end{battle_result = F@_1, star = F@_2};
dfp_read_field_def_s_battle_end(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_s_battle_end(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_s_battle_end(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_battle_end(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_battle_end(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_battle_end_battle_result(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      16 ->
	  d_field_s_battle_end_star(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_battle_end(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_s_battle_end(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_s_battle_end(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_s_battle_end(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_s_battle_end(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_s_battle_end(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #s_battle_end{battle_result = F@_1, star = F@_2}.

d_field_s_battle_end_battle_result(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_battle_end_battle_result(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_s_battle_end_battle_result(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_end(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_s_battle_end_star(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_battle_end_star(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_s_battle_end_star(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_battle_end(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_s_battle_end(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_battle_end(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_s_battle_end(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_battle_end(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_s_battle_end(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_battle_end(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_battle_end(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_battle_end(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_s_battle_end(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_battle_end(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_s_battle_end(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_battle_end(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_s_battle_end(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_battle_end(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_c_friend_battle_invite(Bin, TrUserData) ->
    dfp_read_field_def_c_friend_battle_invite(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_c_friend_battle_invite(<<>>, 0, 0,
					  _) ->
    #c_friend_battle_invite{};
dfp_read_field_def_c_friend_battle_invite(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_c_friend_battle_invite(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_c_friend_battle_invite(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_friend_battle_invite(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_c_friend_battle_invite(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_c_friend_battle_invite(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_c_friend_battle_invite(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_friend_battle_invite(Rest, 0, 0,
						       TrUserData);
      3 ->
	  skip_group_c_friend_battle_invite(Rest, Key bsr 3, 0,
					    TrUserData);
      5 ->
	  skip_32_c_friend_battle_invite(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_friend_battle_invite(<<>>, 0, 0,
					 _) ->
    #c_friend_battle_invite{}.

skip_varint_c_friend_battle_invite(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_c_friend_battle_invite(Rest, Z1, Z2,
				       TrUserData);
skip_varint_c_friend_battle_invite(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_c_friend_battle_invite(Rest, Z1, Z2,
					      TrUserData).

skip_length_delimited_c_friend_battle_invite(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_friend_battle_invite(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_c_friend_battle_invite(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_friend_battle_invite(Rest2, 0, 0,
					      TrUserData).

skip_group_c_friend_battle_invite(Bin, FNum, Z2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_friend_battle_invite(Rest, 0, Z2,
					      TrUserData).

skip_32_c_friend_battle_invite(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_c_friend_battle_invite(Rest, Z1, Z2,
					      TrUserData).

skip_64_c_friend_battle_invite(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_c_friend_battle_invite(Rest, Z1, Z2,
					      TrUserData).

d_msg_c_use_skill(Bin, TrUserData) ->
    dfp_read_field_def_c_use_skill(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_use_skill(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_c_use_skill_skill(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_c_use_skill(<<>>, 0, 0, F@_1, _) ->
    #c_use_skill{skill = F@_1};
dfp_read_field_def_c_use_skill(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_c_use_skill(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_c_use_skill(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_use_skill(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_use_skill(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_use_skill_skill(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_use_skill(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_c_use_skill(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_use_skill(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_c_use_skill(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_c_use_skill(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_use_skill(<<>>, 0, 0, F@_1, _) ->
    #c_use_skill{skill = F@_1}.

d_field_c_use_skill_skill(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_use_skill_skill(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_c_use_skill_skill(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_use_skill(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_c_use_skill(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_c_use_skill(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_c_use_skill(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_use_skill(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_c_use_skill(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_use_skill(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_use_skill(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_use_skill(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_c_use_skill(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_use_skill(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_c_use_skill(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_use_skill(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_c_use_skill(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_c_use_skill(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_c_finish_cg(Bin, TrUserData) ->
    dfp_read_field_def_c_finish_cg(Bin, 0, 0, TrUserData).

dfp_read_field_def_c_finish_cg(<<>>, 0, 0, _) ->
    #c_finish_cg{};
dfp_read_field_def_c_finish_cg(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_c_finish_cg(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_c_finish_cg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_finish_cg(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_c_finish_cg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c_finish_cg(Rest, 0, 0, TrUserData);
      1 -> skip_64_c_finish_cg(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c_finish_cg(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_c_finish_cg(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_c_finish_cg(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c_finish_cg(<<>>, 0, 0, _) ->
    #c_finish_cg{}.

skip_varint_c_finish_cg(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_c_finish_cg(Rest, Z1, Z2, TrUserData);
skip_varint_c_finish_cg(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_c_finish_cg(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_c_finish_cg(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_finish_cg(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_c_finish_cg(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_finish_cg(Rest2, 0, 0, TrUserData).

skip_group_c_finish_cg(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_finish_cg(Rest, 0, Z2, TrUserData).

skip_32_c_finish_cg(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_c_finish_cg(Rest, Z1, Z2,
				   TrUserData).

skip_64_c_finish_cg(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_c_finish_cg(Rest, Z1, Z2,
				   TrUserData).

d_msg_s_use_skill(Bin, TrUserData) ->
    dfp_read_field_def_s_use_skill(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_use_skill(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_use_skill_id(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_s_use_skill(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_use_skill_skill(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_s_use_skill(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #s_use_skill{id = F@_1, skill = F@_2};
dfp_read_field_def_s_use_skill(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_s_use_skill(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_s_use_skill(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_use_skill(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_use_skill(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_use_skill_id(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      16 ->
	  d_field_s_use_skill_skill(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_use_skill(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_s_use_skill(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_s_use_skill(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_s_use_skill(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_s_use_skill(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_s_use_skill(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #s_use_skill{id = F@_1, skill = F@_2}.

d_field_s_use_skill_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_use_skill_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_s_use_skill_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_use_skill(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_s_use_skill_skill(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_use_skill_skill(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_s_use_skill_skill(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_use_skill(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_s_use_skill(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_use_skill(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_s_use_skill(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_use_skill(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_s_use_skill(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_use_skill(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_use_skill(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_use_skill(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_s_use_skill(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_use_skill(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_s_use_skill(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_s_use_skill(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_s_use_skill(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_s_use_skill(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_s_login(Bin, TrUserData) ->
    dfp_read_field_def_s_login(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_login(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_login_player_id(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_s_login(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_login_is_load_cg(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_s_login(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_s_login_is_load_tip(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_s_login(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #s_login{player_id = F@_1, is_load_cg = F@_2,
	     is_load_tip = F@_3};
dfp_read_field_def_s_login(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_s_login(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_s_login(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_login(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_s_login(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_s_login_player_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      16 ->
	  d_field_s_login_is_load_cg(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      24 ->
	  d_field_s_login_is_load_tip(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_s_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_s_login(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_s_login(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_s_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_s_login(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #s_login{player_id = F@_1, is_load_cg = F@_2,
	     is_load_tip = F@_3}.

d_field_s_login_player_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_login_player_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_s_login_player_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_s_login(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_s_login_is_load_cg(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_login_is_load_cg(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_s_login_is_load_cg(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_login(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_s_login_is_load_tip(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_s_login_is_load_tip(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_s_login_is_load_tip(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_login(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, TrUserData).

skip_varint_s_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_s_login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_s_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_s_login(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_login(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_s_login(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_login(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_s_login(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_login(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_s_login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_s_login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_s_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

d_msg_s_friend_battle_invite(Bin, TrUserData) ->
    dfp_read_field_def_s_friend_battle_invite(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_s_friend_battle_invite(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_friend_battle_invite_result(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_s_friend_battle_invite(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_friend_battle_invite_invite_code(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_s_friend_battle_invite(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    #s_friend_battle_invite{result = F@_1,
			    invite_code = F@_2};
dfp_read_field_def_s_friend_battle_invite(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    dg_read_field_def_s_friend_battle_invite(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

dg_read_field_def_s_friend_battle_invite(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_friend_battle_invite(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
dg_read_field_def_s_friend_battle_invite(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_friend_battle_invite_result(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      16 ->
	  d_field_s_friend_battle_invite_invite_code(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_friend_battle_invite(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		skip_64_s_friend_battle_invite(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		skip_length_delimited_s_friend_battle_invite(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		skip_group_s_friend_battle_invite(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_s_friend_battle_invite(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
dg_read_field_def_s_friend_battle_invite(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    #s_friend_battle_invite{result = F@_1,
			    invite_code = F@_2}.

d_field_s_friend_battle_invite_result(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_friend_battle_invite_result(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_s_friend_battle_invite_result(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_friend_battle_invite(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

d_field_s_friend_battle_invite_invite_code(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_friend_battle_invite_invite_code(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_s_friend_battle_invite_invite_code(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_friend_battle_invite(RestF, 0, 0,
					      F@_1, NewFValue, TrUserData).

skip_varint_s_friend_battle_invite(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_friend_battle_invite(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
skip_varint_s_friend_battle_invite(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_friend_battle_invite(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_length_delimited_s_friend_battle_invite(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_friend_battle_invite(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
skip_length_delimited_s_friend_battle_invite(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_friend_battle_invite(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

skip_group_s_friend_battle_invite(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_friend_battle_invite(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

skip_32_s_friend_battle_invite(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_friend_battle_invite(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_64_s_friend_battle_invite(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_friend_battle_invite(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

d_msg_s_buy_pi_fu(Bin, TrUserData) ->
    dfp_read_field_def_s_buy_pi_fu(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_s_buy_pi_fu(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_buy_pi_fu_pi_fu(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_s_buy_pi_fu(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_s_buy_pi_fu_result(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_s_buy_pi_fu(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #s_buy_pi_fu{pi_fu = F@_1, result = F@_2};
dfp_read_field_def_s_buy_pi_fu(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_s_buy_pi_fu(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_s_buy_pi_fu(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s_buy_pi_fu(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_s_buy_pi_fu(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s_buy_pi_fu_pi_fu(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_s_buy_pi_fu_result(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s_buy_pi_fu(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_s_buy_pi_fu(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_s_buy_pi_fu(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_s_buy_pi_fu(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_s_buy_pi_fu(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_s_buy_pi_fu(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #s_buy_pi_fu{pi_fu = F@_1, result = F@_2}.

d_field_s_buy_pi_fu_pi_fu(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_buy_pi_fu_pi_fu(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_s_buy_pi_fu_pi_fu(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_buy_pi_fu(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_s_buy_pi_fu_result(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_s_buy_pi_fu_result(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_s_buy_pi_fu_result(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_s_buy_pi_fu(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_s_buy_pi_fu(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_s_buy_pi_fu(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_s_buy_pi_fu(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_s_buy_pi_fu(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_s_buy_pi_fu(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_s_buy_pi_fu(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_s_buy_pi_fu(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s_buy_pi_fu(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_s_buy_pi_fu(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s_buy_pi_fu(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_s_buy_pi_fu(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_s_buy_pi_fu(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_s_buy_pi_fu(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_s_buy_pi_fu(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_c_login(Bin, TrUserData) ->
    dfp_read_field_def_c_login(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_login(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_player_id(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_head(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_city(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_province(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_c_login_country(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c_login(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, _) ->
    #c_login{player_id = F@_1, name = F@_2, head = F@_3,
	     gender = F@_4, city = F@_5, province = F@_6,
	     country = F@_7};
dfp_read_field_def_c_login(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_c_login(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_c_login(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_login(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
dg_read_field_def_c_login(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_c_login_player_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_c_login_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      26 ->
	  d_field_c_login_head(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      34 ->
	  d_field_c_login_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_c_login_city(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_c_login_province(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_c_login_country(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_c_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_c_login(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
	    3 ->
		skip_group_c_login(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_c_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_c_login(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, _) ->
    #c_login{player_id = F@_1, name = F@_2, head = F@_3,
	     gender = F@_4, city = F@_5, province = F@_6,
	     country = F@_7}.

d_field_c_login_player_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_c_login_player_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_c_login_player_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_c_login_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_c_login_name(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_c_login_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_c_login_head(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_c_login_head(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_c_login_head(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_c_login_gender(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_field_c_login_gender(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_c_login_gender(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_c_login_city(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_c_login_city(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_c_login_city(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_c_login_province(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData)
    when N < 57 ->
    d_field_c_login_province(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData);
d_field_c_login_province(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_c_login_country(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 57 ->
    d_field_c_login_country(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
d_field_c_login_country(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_c_login(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_c_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_c_login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_c_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_c_login(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_c_login(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
skip_length_delimited_c_login(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_login(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_c_login(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_login(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_c_login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_c_login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c_login(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_msg_c_get_goal_reward(Bin, TrUserData) ->
    dfp_read_field_def_c_get_goal_reward(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_c_get_goal_reward(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_c_get_goal_reward_reward_id(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_c_get_goal_reward(<<>>, 0, 0, F@_1,
				     _) ->
    #c_get_goal_reward{reward_id = F@_1};
dfp_read_field_def_c_get_goal_reward(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_c_get_goal_reward(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_c_get_goal_reward(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c_get_goal_reward(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_c_get_goal_reward(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c_get_goal_reward_reward_id(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c_get_goal_reward(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_c_get_goal_reward(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_c_get_goal_reward(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_c_get_goal_reward(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_c_get_goal_reward(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_c_get_goal_reward(<<>>, 0, 0, F@_1,
				    _) ->
    #c_get_goal_reward{reward_id = F@_1}.

d_field_c_get_goal_reward_reward_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_c_get_goal_reward_reward_id(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_c_get_goal_reward_reward_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_c_get_goal_reward(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_c_get_goal_reward(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_c_get_goal_reward(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_c_get_goal_reward(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_c_get_goal_reward(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_c_get_goal_reward(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_c_get_goal_reward(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_c_get_goal_reward(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_get_goal_reward(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_c_get_goal_reward(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_get_goal_reward(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_c_get_goal_reward(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_c_get_goal_reward(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_c_get_goal_reward(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_c_get_goal_reward(Rest, Z1, Z2, F@_1,
					 TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #s_player_info{} ->
	  merge_msg_s_player_info(Prev, New, TrUserData);
      #s_heart{} -> merge_msg_s_heart(Prev, New, TrUserData);
      #c_rank_info{} ->
	  merge_msg_c_rank_info(Prev, New, TrUserData);
      #s_hp_change{} ->
	  merge_msg_s_hp_change(Prev, New, TrUserData);
      #c_buy_pi_fu{} ->
	  merge_msg_c_buy_pi_fu(Prev, New, TrUserData);
      #c_get_player_id{} ->
	  merge_msg_c_get_player_id(Prev, New, TrUserData);
      #c_miss_mark{} ->
	  merge_msg_c_miss_mark(Prev, New, TrUserData);
      #c_player_info{} ->
	  merge_msg_c_player_info(Prev, New, TrUserData);
      #s_battle_start{} ->
	  merge_msg_s_battle_start(Prev, New, TrUserData);
      #s_score_change{} ->
	  merge_msg_s_score_change(Prev, New, TrUserData);
      #p_star_info{} ->
	  merge_msg_p_star_info(Prev, New, TrUserData);
      #s_battle_info{} ->
	  merge_msg_s_battle_info(Prev, New, TrUserData);
      #c_single_game{} ->
	  merge_msg_c_single_game(Prev, New, TrUserData);
      #c_finish_tip{} ->
	  merge_msg_c_finish_tip(Prev, New, TrUserData);
      #s_single_game{} ->
	  merge_msg_s_single_game(Prev, New, TrUserData);
      #s_globle_goal{} ->
	  merge_msg_s_globle_goal(Prev, New, TrUserData);
      #s_single_game_end{} ->
	  merge_msg_s_single_game_end(Prev, New, TrUserData);
      #c_battle_info{} ->
	  merge_msg_c_battle_info(Prev, New, TrUserData);
      #c_match_battle{} ->
	  merge_msg_c_match_battle(Prev, New, TrUserData);
      #c_single_game_tip{} ->
	  merge_msg_c_single_game_tip(Prev, New, TrUserData);
      #c_catch_mark{} ->
	  merge_msg_c_catch_mark(Prev, New, TrUserData);
      #s_goal_reward{} ->
	  merge_msg_s_goal_reward(Prev, New, TrUserData);
      #c_single_game_end{} ->
	  merge_msg_c_single_game_end(Prev, New, TrUserData);
      #s_get_player_id{} ->
	  merge_msg_s_get_player_id(Prev, New, TrUserData);
      #s_get_goal_reward{} ->
	  merge_msg_s_get_goal_reward(Prev, New, TrUserData);
      #c_change_pi_fu{} ->
	  merge_msg_c_change_pi_fu(Prev, New, TrUserData);
      #s_change_pi_fu{} ->
	  merge_msg_s_change_pi_fu(Prev, New, TrUserData);
      #c_heart{} -> merge_msg_c_heart(Prev, New, TrUserData);
      #p_rank{} -> merge_msg_p_rank(Prev, New, TrUserData);
      #s_rank_info{} ->
	  merge_msg_s_rank_info(Prev, New, TrUserData);
      #c_goal_reward{} ->
	  merge_msg_c_goal_reward(Prev, New, TrUserData);
      #s_battle_end{} ->
	  merge_msg_s_battle_end(Prev, New, TrUserData);
      #c_friend_battle_invite{} ->
	  merge_msg_c_friend_battle_invite(Prev, New, TrUserData);
      #c_use_skill{} ->
	  merge_msg_c_use_skill(Prev, New, TrUserData);
      #c_finish_cg{} ->
	  merge_msg_c_finish_cg(Prev, New, TrUserData);
      #s_use_skill{} ->
	  merge_msg_s_use_skill(Prev, New, TrUserData);
      #s_login{} -> merge_msg_s_login(Prev, New, TrUserData);
      #s_friend_battle_invite{} ->
	  merge_msg_s_friend_battle_invite(Prev, New, TrUserData);
      #s_buy_pi_fu{} ->
	  merge_msg_s_buy_pi_fu(Prev, New, TrUserData);
      #c_login{} -> merge_msg_c_login(Prev, New, TrUserData);
      #c_get_goal_reward{} ->
	  merge_msg_c_get_goal_reward(Prev, New, TrUserData)
    end.

merge_msg_s_player_info(#s_player_info{have_pi_fu =
					   PFhave_pi_fu,
				       skills = PFskills},
			#s_player_info{total_exp = NFtotal_exp,
				       cur_pi_fu = NFcur_pi_fu,
				       have_pi_fu = NFhave_pi_fu,
				       skills = NFskills, gold = NFgold},
			TrUserData) ->
    #s_player_info{total_exp = NFtotal_exp,
		   cur_pi_fu = NFcur_pi_fu,
		   have_pi_fu =
		       if PFhave_pi_fu /= undefined,
			  NFhave_pi_fu /= undefined ->
			      'erlang_++'(PFhave_pi_fu, NFhave_pi_fu,
					  TrUserData);
			  PFhave_pi_fu == undefined -> NFhave_pi_fu;
			  NFhave_pi_fu == undefined -> PFhave_pi_fu
		       end,
		   skills =
		       if PFskills /= undefined, NFskills /= undefined ->
			      'erlang_++'(PFskills, NFskills, TrUserData);
			  PFskills == undefined -> NFskills;
			  NFskills == undefined -> PFskills
		       end,
		   gold = NFgold}.

merge_msg_s_heart(_Prev, New, _TrUserData) -> New.

merge_msg_c_rank_info(#c_rank_info{},
		      #c_rank_info{tag = NFtag, rank = NFrank}, _) ->
    #c_rank_info{tag = NFtag, rank = NFrank}.

merge_msg_s_hp_change(#s_hp_change{},
		      #s_hp_change{id = NFid, hp = NFhp}, _) ->
    #s_hp_change{id = NFid, hp = NFhp}.

merge_msg_c_buy_pi_fu(#c_buy_pi_fu{},
		      #c_buy_pi_fu{pi_fu = NFpi_fu}, _) ->
    #c_buy_pi_fu{pi_fu = NFpi_fu}.

merge_msg_c_get_player_id(#c_get_player_id{},
			  #c_get_player_id{code = NFcode}, _) ->
    #c_get_player_id{code = NFcode}.

merge_msg_c_miss_mark(_Prev, New, _TrUserData) -> New.

merge_msg_c_player_info(_Prev, New, _TrUserData) -> New.

merge_msg_s_battle_start(#s_battle_start{},
			 #s_battle_start{target_id = NFtarget_id,
					 target_star = NFtarget_star, hp = NFhp,
					 target_name = NFtarget_name,
					 target_head = NFtarget_head,
					 target_gender = NFtarget_gender},
			 _) ->
    #s_battle_start{target_id = NFtarget_id,
		    target_star = NFtarget_star, hp = NFhp,
		    target_name = NFtarget_name,
		    target_head = NFtarget_head,
		    target_gender = NFtarget_gender}.

merge_msg_s_score_change(#s_score_change{},
			 #s_score_change{score = NFscore}, _) ->
    #s_score_change{score = NFscore}.

merge_msg_p_star_info(#p_star_info{},
		      #p_star_info{star_lv = NFstar_lv, count = NFcount},
		      _) ->
    #p_star_info{star_lv = NFstar_lv, count = NFcount}.

merge_msg_s_battle_info(#s_battle_info{info = PFinfo},
			#s_battle_info{status = NFstatus, time = NFtime,
				       fight_count = NFfight_count,
				       add_second = NFadd_second, info = NFinfo,
				       match_second = NFmatch_second},
			TrUserData) ->
    #s_battle_info{status = NFstatus, time = NFtime,
		   fight_count = NFfight_count, add_second = NFadd_second,
		   info =
		       if PFinfo /= undefined, NFinfo /= undefined ->
			      'erlang_++'(PFinfo, NFinfo, TrUserData);
			  PFinfo == undefined -> NFinfo;
			  NFinfo == undefined -> PFinfo
		       end,
		   match_second = NFmatch_second}.

merge_msg_c_single_game(_Prev, New, _TrUserData) -> New.

merge_msg_c_finish_tip(_Prev, New, _TrUserData) -> New.

merge_msg_s_single_game(#s_single_game{},
			#s_single_game{stage = NFstage, skill = NFskill,
				       is_load_tip = NFis_load_tip,
				       cur_pi_fu = NFcur_pi_fu},
			_) ->
    #s_single_game{stage = NFstage, skill = NFskill,
		   is_load_tip = NFis_load_tip, cur_pi_fu = NFcur_pi_fu}.

merge_msg_s_globle_goal(#s_globle_goal{},
			#s_globle_goal{save_total = NFsave_total,
				       need_save = NFneed_save},
			_) ->
    #s_globle_goal{save_total = NFsave_total,
		   need_save = NFneed_save}.

merge_msg_s_single_game_end(#s_single_game_end{},
			    #s_single_game_end{result = NFresult,
					       is_first = NFis_first,
					       total_score = NFtotal_score,
					       total_exp = NFtotal_exp},
			    _) ->
    #s_single_game_end{result = NFresult,
		       is_first = NFis_first, total_score = NFtotal_score,
		       total_exp = NFtotal_exp}.

merge_msg_c_battle_info(_Prev, New, _TrUserData) -> New.

merge_msg_c_match_battle(_Prev, New, _TrUserData) ->
    New.

merge_msg_c_single_game_tip(_Prev, New, _TrUserData) ->
    New.

merge_msg_c_catch_mark(#c_catch_mark{},
		       #c_catch_mark{combo = NFcombo, big_skill = NFbig_skill},
		       _) ->
    #c_catch_mark{combo = NFcombo, big_skill = NFbig_skill}.

merge_msg_s_goal_reward(#s_goal_reward{can_reward =
					   PFcan_reward,
				       geted_reward = PFgeted_reward},
			#s_goal_reward{can_reward = NFcan_reward,
				       geted_reward = NFgeted_reward},
			TrUserData) ->
    #s_goal_reward{can_reward =
		       if PFcan_reward /= undefined,
			  NFcan_reward /= undefined ->
			      'erlang_++'(PFcan_reward, NFcan_reward,
					  TrUserData);
			  PFcan_reward == undefined -> NFcan_reward;
			  NFcan_reward == undefined -> PFcan_reward
		       end,
		   geted_reward =
		       if PFgeted_reward /= undefined,
			  NFgeted_reward /= undefined ->
			      'erlang_++'(PFgeted_reward, NFgeted_reward,
					  TrUserData);
			  PFgeted_reward == undefined -> NFgeted_reward;
			  NFgeted_reward == undefined -> PFgeted_reward
		       end}.

merge_msg_c_single_game_end(#c_single_game_end{},
			    #c_single_game_end{score = NFscore, exp = NFexp,
					       gold = NFgold},
			    _) ->
    #c_single_game_end{score = NFscore, exp = NFexp,
		       gold = NFgold}.

merge_msg_s_get_player_id(#s_get_player_id{},
			  #s_get_player_id{player_id = NFplayer_id}, _) ->
    #s_get_player_id{player_id = NFplayer_id}.

merge_msg_s_get_goal_reward(#s_get_goal_reward{},
			    #s_get_goal_reward{reward_id = NFreward_id,
					       result = NFresult},
			    _) ->
    #s_get_goal_reward{reward_id = NFreward_id,
		       result = NFresult}.

merge_msg_c_change_pi_fu(#c_change_pi_fu{},
			 #c_change_pi_fu{pi_fu = NFpi_fu}, _) ->
    #c_change_pi_fu{pi_fu = NFpi_fu}.

merge_msg_s_change_pi_fu(#s_change_pi_fu{},
			 #s_change_pi_fu{pi_fu = NFpi_fu, result = NFresult},
			 _) ->
    #s_change_pi_fu{pi_fu = NFpi_fu, result = NFresult}.

merge_msg_c_heart(_Prev, New, _TrUserData) -> New.

merge_msg_p_rank(#p_rank{},
		 #p_rank{key = NFkey, value = NFvalue, rank = NFrank,
			 title = NFtitle, name = NFname, head = NFhead,
			 gender = NFgender},
		 _) ->
    #p_rank{key = NFkey, value = NFvalue, rank = NFrank,
	    title = NFtitle, name = NFname, head = NFhead,
	    gender = NFgender}.

merge_msg_s_rank_info(#s_rank_info{rank_info =
				       PFrank_info},
		      #s_rank_info{tag = NFtag, rank_info = NFrank_info},
		      TrUserData) ->
    #s_rank_info{tag = NFtag,
		 rank_info =
		     if PFrank_info /= undefined, NFrank_info /= undefined ->
			    'erlang_++'(PFrank_info, NFrank_info, TrUserData);
			PFrank_info == undefined -> NFrank_info;
			NFrank_info == undefined -> PFrank_info
		     end}.

merge_msg_c_goal_reward(_Prev, New, _TrUserData) -> New.

merge_msg_s_battle_end(#s_battle_end{},
		       #s_battle_end{battle_result = NFbattle_result,
				     star = NFstar},
		       _) ->
    #s_battle_end{battle_result = NFbattle_result,
		  star = NFstar}.

merge_msg_c_friend_battle_invite(_Prev, New,
				 _TrUserData) ->
    New.

merge_msg_c_use_skill(#c_use_skill{},
		      #c_use_skill{skill = NFskill}, _) ->
    #c_use_skill{skill = NFskill}.

merge_msg_c_finish_cg(_Prev, New, _TrUserData) -> New.

merge_msg_s_use_skill(#s_use_skill{},
		      #s_use_skill{id = NFid, skill = NFskill}, _) ->
    #s_use_skill{id = NFid, skill = NFskill}.

merge_msg_s_login(#s_login{},
		  #s_login{player_id = NFplayer_id,
			   is_load_cg = NFis_load_cg,
			   is_load_tip = NFis_load_tip},
		  _) ->
    #s_login{player_id = NFplayer_id,
	     is_load_cg = NFis_load_cg, is_load_tip = NFis_load_tip}.

merge_msg_s_friend_battle_invite(#s_friend_battle_invite{},
				 #s_friend_battle_invite{result = NFresult,
							 invite_code =
							     NFinvite_code},
				 _) ->
    #s_friend_battle_invite{result = NFresult,
			    invite_code = NFinvite_code}.

merge_msg_s_buy_pi_fu(#s_buy_pi_fu{},
		      #s_buy_pi_fu{pi_fu = NFpi_fu, result = NFresult}, _) ->
    #s_buy_pi_fu{pi_fu = NFpi_fu, result = NFresult}.

merge_msg_c_login(#c_login{},
		  #c_login{player_id = NFplayer_id, name = NFname,
			   head = NFhead, gender = NFgender, city = NFcity,
			   province = NFprovince, country = NFcountry},
		  _) ->
    #c_login{player_id = NFplayer_id, name = NFname,
	     head = NFhead, gender = NFgender, city = NFcity,
	     province = NFprovince, country = NFcountry}.

merge_msg_c_get_goal_reward(#c_get_goal_reward{},
			    #c_get_goal_reward{reward_id = NFreward_id}, _) ->
    #c_get_goal_reward{reward_id = NFreward_id}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #s_player_info{} ->
	  v_msg_s_player_info(Msg, [s_player_info], TrUserData);
      #s_heart{} -> v_msg_s_heart(Msg, [s_heart], TrUserData);
      #c_rank_info{} ->
	  v_msg_c_rank_info(Msg, [c_rank_info], TrUserData);
      #s_hp_change{} ->
	  v_msg_s_hp_change(Msg, [s_hp_change], TrUserData);
      #c_buy_pi_fu{} ->
	  v_msg_c_buy_pi_fu(Msg, [c_buy_pi_fu], TrUserData);
      #c_get_player_id{} ->
	  v_msg_c_get_player_id(Msg, [c_get_player_id],
				TrUserData);
      #c_miss_mark{} ->
	  v_msg_c_miss_mark(Msg, [c_miss_mark], TrUserData);
      #c_player_info{} ->
	  v_msg_c_player_info(Msg, [c_player_info], TrUserData);
      #s_battle_start{} ->
	  v_msg_s_battle_start(Msg, [s_battle_start], TrUserData);
      #s_score_change{} ->
	  v_msg_s_score_change(Msg, [s_score_change], TrUserData);
      #p_star_info{} ->
	  v_msg_p_star_info(Msg, [p_star_info], TrUserData);
      #s_battle_info{} ->
	  v_msg_s_battle_info(Msg, [s_battle_info], TrUserData);
      #c_single_game{} ->
	  v_msg_c_single_game(Msg, [c_single_game], TrUserData);
      #c_finish_tip{} ->
	  v_msg_c_finish_tip(Msg, [c_finish_tip], TrUserData);
      #s_single_game{} ->
	  v_msg_s_single_game(Msg, [s_single_game], TrUserData);
      #s_globle_goal{} ->
	  v_msg_s_globle_goal(Msg, [s_globle_goal], TrUserData);
      #s_single_game_end{} ->
	  v_msg_s_single_game_end(Msg, [s_single_game_end],
				  TrUserData);
      #c_battle_info{} ->
	  v_msg_c_battle_info(Msg, [c_battle_info], TrUserData);
      #c_match_battle{} ->
	  v_msg_c_match_battle(Msg, [c_match_battle], TrUserData);
      #c_single_game_tip{} ->
	  v_msg_c_single_game_tip(Msg, [c_single_game_tip],
				  TrUserData);
      #c_catch_mark{} ->
	  v_msg_c_catch_mark(Msg, [c_catch_mark], TrUserData);
      #s_goal_reward{} ->
	  v_msg_s_goal_reward(Msg, [s_goal_reward], TrUserData);
      #c_single_game_end{} ->
	  v_msg_c_single_game_end(Msg, [c_single_game_end],
				  TrUserData);
      #s_get_player_id{} ->
	  v_msg_s_get_player_id(Msg, [s_get_player_id],
				TrUserData);
      #s_get_goal_reward{} ->
	  v_msg_s_get_goal_reward(Msg, [s_get_goal_reward],
				  TrUserData);
      #c_change_pi_fu{} ->
	  v_msg_c_change_pi_fu(Msg, [c_change_pi_fu], TrUserData);
      #s_change_pi_fu{} ->
	  v_msg_s_change_pi_fu(Msg, [s_change_pi_fu], TrUserData);
      #c_heart{} -> v_msg_c_heart(Msg, [c_heart], TrUserData);
      #p_rank{} -> v_msg_p_rank(Msg, [p_rank], TrUserData);
      #s_rank_info{} ->
	  v_msg_s_rank_info(Msg, [s_rank_info], TrUserData);
      #c_goal_reward{} ->
	  v_msg_c_goal_reward(Msg, [c_goal_reward], TrUserData);
      #s_battle_end{} ->
	  v_msg_s_battle_end(Msg, [s_battle_end], TrUserData);
      #c_friend_battle_invite{} ->
	  v_msg_c_friend_battle_invite(Msg,
				       [c_friend_battle_invite], TrUserData);
      #c_use_skill{} ->
	  v_msg_c_use_skill(Msg, [c_use_skill], TrUserData);
      #c_finish_cg{} ->
	  v_msg_c_finish_cg(Msg, [c_finish_cg], TrUserData);
      #s_use_skill{} ->
	  v_msg_s_use_skill(Msg, [s_use_skill], TrUserData);
      #s_login{} -> v_msg_s_login(Msg, [s_login], TrUserData);
      #s_friend_battle_invite{} ->
	  v_msg_s_friend_battle_invite(Msg,
				       [s_friend_battle_invite], TrUserData);
      #s_buy_pi_fu{} ->
	  v_msg_s_buy_pi_fu(Msg, [s_buy_pi_fu], TrUserData);
      #c_login{} -> v_msg_c_login(Msg, [c_login], TrUserData);
      #c_get_goal_reward{} ->
	  v_msg_c_get_goal_reward(Msg, [c_get_goal_reward],
				  TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_s_player_info/3}).
v_msg_s_player_info(#s_player_info{total_exp = F1,
				   cur_pi_fu = F2, have_pi_fu = F3, skills = F4,
				   gold = F5},
		    Path, _) ->
    v_type_uint32(F1, [total_exp | Path]),
    v_type_uint32(F2, [cur_pi_fu | Path]),
    if is_list(F3) ->
	   _ = [v_type_uint32(Elem, [have_pi_fu | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F3,
			 [have_pi_fu | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_uint32(Elem, [skills | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F4,
			 [skills | Path])
    end,
    v_type_uint32(F5, [gold | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_heart/3}).
v_msg_s_heart(#s_heart{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_c_rank_info/3}).
v_msg_c_rank_info(#c_rank_info{tag = F1, rank = F2},
		  Path, _) ->
    v_type_string(F1, [tag | Path]),
    v_type_uint32(F2, [rank | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_hp_change/3}).
v_msg_s_hp_change(#s_hp_change{id = F1, hp = F2}, Path,
		  _) ->
    v_type_string(F1, [id | Path]),
    v_type_uint32(F2, [hp | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_buy_pi_fu/3}).
v_msg_c_buy_pi_fu(#c_buy_pi_fu{pi_fu = F1}, Path, _) ->
    v_type_uint32(F1, [pi_fu | Path]), ok.

-dialyzer({nowarn_function,v_msg_c_get_player_id/3}).
v_msg_c_get_player_id(#c_get_player_id{code = F1}, Path,
		      _) ->
    v_type_string(F1, [code | Path]), ok.

-dialyzer({nowarn_function,v_msg_c_miss_mark/3}).
v_msg_c_miss_mark(#c_miss_mark{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_c_player_info/3}).
v_msg_c_player_info(#c_player_info{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_s_battle_start/3}).
v_msg_s_battle_start(#s_battle_start{target_id = F1,
				     target_star = F2, hp = F3,
				     target_name = F4, target_head = F5,
				     target_gender = F6},
		     Path, _) ->
    v_type_string(F1, [target_id | Path]),
    v_type_uint32(F2, [target_star | Path]),
    v_type_uint32(F3, [hp | Path]),
    v_type_string(F4, [target_name | Path]),
    v_type_string(F5, [target_head | Path]),
    v_type_string(F6, [target_gender | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_score_change/3}).
v_msg_s_score_change(#s_score_change{score = F1}, Path,
		     _) ->
    v_type_uint32(F1, [score | Path]), ok.

-dialyzer({nowarn_function,v_msg_p_star_info/3}).
v_msg_p_star_info(#p_star_info{star_lv = F1,
			       count = F2},
		  Path, _) ->
    v_type_uint32(F1, [star_lv | Path]),
    v_type_uint32(F2, [count | Path]),
    ok;
v_msg_p_star_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_star_info}, X, Path).

-dialyzer({nowarn_function,v_msg_s_battle_info/3}).
v_msg_s_battle_info(#s_battle_info{status = F1,
				   time = F2, fight_count = F3, add_second = F4,
				   info = F5, match_second = F6},
		    Path, TrUserData) ->
    v_type_uint32(F1, [status | Path]),
    v_type_uint32(F2, [time | Path]),
    v_type_uint32(F3, [fight_count | Path]),
    v_type_uint32(F4, [add_second | Path]),
    if is_list(F5) ->
	   _ = [v_msg_p_star_info(Elem, [info | Path], TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_star_info}}, F5,
			 [info | Path])
    end,
    v_type_uint32(F6, [match_second | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_single_game/3}).
v_msg_c_single_game(#c_single_game{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_c_finish_tip/3}).
v_msg_c_finish_tip(#c_finish_tip{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_s_single_game/3}).
v_msg_s_single_game(#s_single_game{stage = F1,
				   skill = F2, is_load_tip = F3,
				   cur_pi_fu = F4},
		    Path, _) ->
    v_type_uint32(F1, [stage | Path]),
    v_type_uint32(F2, [skill | Path]),
    v_type_uint32(F3, [is_load_tip | Path]),
    v_type_uint32(F4, [cur_pi_fu | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_globle_goal/3}).
v_msg_s_globle_goal(#s_globle_goal{save_total = F1,
				   need_save = F2},
		    Path, _) ->
    v_type_uint32(F1, [save_total | Path]),
    v_type_uint32(F2, [need_save | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_single_game_end/3}).
v_msg_s_single_game_end(#s_single_game_end{result = F1,
					   is_first = F2, total_score = F3,
					   total_exp = F4},
			Path, _) ->
    v_type_uint32(F1, [result | Path]),
    v_type_uint32(F2, [is_first | Path]),
    v_type_uint32(F3, [total_score | Path]),
    v_type_uint32(F4, [total_exp | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_battle_info/3}).
v_msg_c_battle_info(#c_battle_info{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_c_match_battle/3}).
v_msg_c_match_battle(#c_match_battle{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_c_single_game_tip/3}).
v_msg_c_single_game_tip(#c_single_game_tip{}, _Path,
			_) ->
    ok.

-dialyzer({nowarn_function,v_msg_c_catch_mark/3}).
v_msg_c_catch_mark(#c_catch_mark{combo = F1,
				 big_skill = F2},
		   Path, _) ->
    v_type_uint32(F1, [combo | Path]),
    v_type_uint32(F2, [big_skill | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_goal_reward/3}).
v_msg_s_goal_reward(#s_goal_reward{can_reward = F1,
				   geted_reward = F2},
		    Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_uint32(Elem, [can_reward | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F1,
			 [can_reward | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_uint32(Elem, [geted_reward | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F2,
			 [geted_reward | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_c_single_game_end/3}).
v_msg_c_single_game_end(#c_single_game_end{score = F1,
					   exp = F2, gold = F3},
			Path, _) ->
    v_type_uint32(F1, [score | Path]),
    v_type_uint32(F2, [exp | Path]),
    v_type_uint32(F3, [gold | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_get_player_id/3}).
v_msg_s_get_player_id(#s_get_player_id{player_id = F1},
		      Path, _) ->
    v_type_string(F1, [player_id | Path]), ok.

-dialyzer({nowarn_function,v_msg_s_get_goal_reward/3}).
v_msg_s_get_goal_reward(#s_get_goal_reward{reward_id =
					       F1,
					   result = F2},
			Path, _) ->
    v_type_uint32(F1, [reward_id | Path]),
    v_type_uint32(F2, [result | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_change_pi_fu/3}).
v_msg_c_change_pi_fu(#c_change_pi_fu{pi_fu = F1}, Path,
		     _) ->
    v_type_uint32(F1, [pi_fu | Path]), ok.

-dialyzer({nowarn_function,v_msg_s_change_pi_fu/3}).
v_msg_s_change_pi_fu(#s_change_pi_fu{pi_fu = F1,
				     result = F2},
		     Path, _) ->
    v_type_uint32(F1, [pi_fu | Path]),
    v_type_uint32(F2, [result | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_heart/3}).
v_msg_c_heart(#c_heart{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_p_rank/3}).
v_msg_p_rank(#p_rank{key = F1, value = F2, rank = F3,
		     title = F4, name = F5, head = F6, gender = F7},
	     Path, _) ->
    v_type_string(F1, [key | Path]),
    v_type_uint32(F2, [value | Path]),
    v_type_uint32(F3, [rank | Path]),
    v_type_uint32(F4, [title | Path]),
    v_type_string(F5, [name | Path]),
    v_type_string(F6, [head | Path]),
    v_type_string(F7, [gender | Path]),
    ok;
v_msg_p_rank(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_rank}, X, Path).

-dialyzer({nowarn_function,v_msg_s_rank_info/3}).
v_msg_s_rank_info(#s_rank_info{tag = F1,
			       rank_info = F2},
		  Path, TrUserData) ->
    v_type_string(F1, [tag | Path]),
    if is_list(F2) ->
	   _ = [v_msg_p_rank(Elem, [rank_info | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_rank}}, F2,
			 [rank_info | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_c_goal_reward/3}).
v_msg_c_goal_reward(#c_goal_reward{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_s_battle_end/3}).
v_msg_s_battle_end(#s_battle_end{battle_result = F1,
				 star = F2},
		   Path, _) ->
    v_type_uint32(F1, [battle_result | Path]),
    v_type_uint32(F2, [star | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_friend_battle_invite/3}).
v_msg_c_friend_battle_invite(#c_friend_battle_invite{},
			     _Path, _) ->
    ok.

-dialyzer({nowarn_function,v_msg_c_use_skill/3}).
v_msg_c_use_skill(#c_use_skill{skill = F1}, Path, _) ->
    v_type_uint32(F1, [skill | Path]), ok.

-dialyzer({nowarn_function,v_msg_c_finish_cg/3}).
v_msg_c_finish_cg(#c_finish_cg{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_s_use_skill/3}).
v_msg_s_use_skill(#s_use_skill{id = F1, skill = F2},
		  Path, _) ->
    v_type_string(F1, [id | Path]),
    v_type_uint32(F2, [skill | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_login/3}).
v_msg_s_login(#s_login{player_id = F1, is_load_cg = F2,
		       is_load_tip = F3},
	      Path, _) ->
    v_type_string(F1, [player_id | Path]),
    v_type_uint32(F2, [is_load_cg | Path]),
    v_type_uint32(F3, [is_load_tip | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_friend_battle_invite/3}).
v_msg_s_friend_battle_invite(#s_friend_battle_invite{result
							 = F1,
						     invite_code = F2},
			     Path, _) ->
    v_type_uint32(F1, [result | Path]),
    v_type_uint32(F2, [invite_code | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_s_buy_pi_fu/3}).
v_msg_s_buy_pi_fu(#s_buy_pi_fu{pi_fu = F1, result = F2},
		  Path, _) ->
    v_type_uint32(F1, [pi_fu | Path]),
    v_type_uint32(F2, [result | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_login/3}).
v_msg_c_login(#c_login{player_id = F1, name = F2,
		       head = F3, gender = F4, city = F5, province = F6,
		       country = F7},
	      Path, _) ->
    v_type_string(F1, [player_id | Path]),
    v_type_string(F2, [name | Path]),
    v_type_string(F3, [head | Path]),
    v_type_string(F4, [gender | Path]),
    v_type_string(F5, [city | Path]),
    v_type_string(F6, [province | Path]),
    v_type_string(F7, [country | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_c_get_goal_reward/3}).
v_msg_c_get_goal_reward(#c_get_goal_reward{reward_id =
					       F1},
			Path, _) ->
    v_type_uint32(F1, [reward_id | Path]), ok.

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, msgID},
      [{none, 0}, {c_get_player_id, 1001},
       {s_get_player_id, 1002}, {c_login, 1003},
       {s_login, 1004}, {s_globle_goal, 1005}, {c_heart, 1006},
       {s_heart, 1007}, {c_finish_cg, 1008},
       {c_finish_tip, 1009}, {c_player_info, 1101},
       {s_player_info, 1102}, {c_buy_pi_fu, 1103},
       {s_buy_pi_fu, 1104}, {c_change_pi_fu, 1105},
       {s_change_pi_fu, 1106}, {c_goal_reward, 1107},
       {s_goal_reward, 1108}, {c_get_goal_reward, 1109},
       {s_get_goal_reward, 1110}, {c_single_game, 1201},
       {s_single_game, 1202}, {c_single_game_end, 1203},
       {s_single_game_end, 1204}, {c_single_game_tip, 1205},
       {c_rank_info, 1301}, {s_rank_info, 1302},
       {c_friend_battle_invite, 1401},
       {s_friend_battle_invite, 1402}, {c_match_battle, 1403},
       {s_battle_start, 1404}, {c_catch_mark, 1405},
       {c_miss_mark, 1406}, {c_use_skill, 1407},
       {s_use_skill, 1408}, {s_score_change, 1409},
       {s_hp_change, 1410}, {s_battle_end, 1411},
       {c_battle_info, 1412}, {s_battle_info, 1413}]},
     {{msg, s_player_info},
      [#field{name = total_exp, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = cur_pi_fu, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = have_pi_fu, fnum = 3, rnum = 4,
	      type = uint32, occurrence = repeated, opts = []},
       #field{name = skills, fnum = 4, rnum = 5, type = uint32,
	      occurrence = repeated, opts = []},
       #field{name = gold, fnum = 5, rnum = 6, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_heart}, []},
     {{msg, c_rank_info},
      [#field{name = tag, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = rank, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_hp_change},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = hp, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_buy_pi_fu},
      [#field{name = pi_fu, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_get_player_id},
      [#field{name = code, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, c_miss_mark}, []}, {{msg, c_player_info}, []},
     {{msg, s_battle_start},
      [#field{name = target_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = target_star, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = hp, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []},
       #field{name = target_name, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = target_head, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []},
       #field{name = target_gender, fnum = 6, rnum = 7,
	      type = string, occurrence = required, opts = []}]},
     {{msg, s_score_change},
      [#field{name = score, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, p_star_info},
      [#field{name = star_lv, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = count, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_battle_info},
      [#field{name = status, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = fight_count, fnum = 3, rnum = 4,
	      type = uint32, occurrence = required, opts = []},
       #field{name = add_second, fnum = 4, rnum = 5,
	      type = uint32, occurrence = required, opts = []},
       #field{name = info, fnum = 5, rnum = 6,
	      type = {msg, p_star_info}, occurrence = repeated,
	      opts = []},
       #field{name = match_second, fnum = 6, rnum = 7,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, c_single_game}, []}, {{msg, c_finish_tip}, []},
     {{msg, s_single_game},
      [#field{name = stage, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = skill, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = is_load_tip, fnum = 3, rnum = 4,
	      type = uint32, occurrence = required, opts = []},
       #field{name = cur_pi_fu, fnum = 4, rnum = 5,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, s_globle_goal},
      [#field{name = save_total, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = need_save, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, s_single_game_end},
      [#field{name = result, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = is_first, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = total_score, fnum = 3, rnum = 4,
	      type = uint32, occurrence = required, opts = []},
       #field{name = total_exp, fnum = 4, rnum = 5,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, c_battle_info}, []}, {{msg, c_match_battle}, []},
     {{msg, c_single_game_tip}, []},
     {{msg, c_catch_mark},
      [#field{name = combo, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = big_skill, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, s_goal_reward},
      [#field{name = can_reward, fnum = 1, rnum = 2,
	      type = uint32, occurrence = repeated, opts = []},
       #field{name = geted_reward, fnum = 2, rnum = 3,
	      type = uint32, occurrence = repeated, opts = []}]},
     {{msg, c_single_game_end},
      [#field{name = score, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = exp, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = gold, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_get_player_id},
      [#field{name = player_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, s_get_goal_reward},
      [#field{name = reward_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = result, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_change_pi_fu},
      [#field{name = pi_fu, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_change_pi_fu},
      [#field{name = pi_fu, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = result, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_heart}, []},
     {{msg, p_rank},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = rank, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []},
       #field{name = title, fnum = 4, rnum = 5, type = uint32,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = head, fnum = 6, rnum = 7, type = string,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 7, rnum = 8, type = string,
	      occurrence = required, opts = []}]},
     {{msg, s_rank_info},
      [#field{name = tag, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = rank_info, fnum = 2, rnum = 3,
	      type = {msg, p_rank}, occurrence = repeated,
	      opts = []}]},
     {{msg, c_goal_reward}, []},
     {{msg, s_battle_end},
      [#field{name = battle_result, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = star, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_friend_battle_invite}, []},
     {{msg, c_use_skill},
      [#field{name = skill, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_finish_cg}, []},
     {{msg, s_use_skill},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = skill, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, s_login},
      [#field{name = player_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = is_load_cg, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = is_load_tip, fnum = 3, rnum = 4,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, s_friend_battle_invite},
      [#field{name = result, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = invite_code, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, s_buy_pi_fu},
      [#field{name = pi_fu, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = result, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, c_login},
      [#field{name = player_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = head, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = city, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = province, fnum = 6, rnum = 7,
	      type = string, occurrence = required, opts = []},
       #field{name = country, fnum = 7, rnum = 8,
	      type = string, occurrence = required, opts = []}]},
     {{msg, c_get_goal_reward},
      [#field{name = reward_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]}].


get_msg_names() ->
    [s_player_info, s_heart, c_rank_info, s_hp_change,
     c_buy_pi_fu, c_get_player_id, c_miss_mark,
     c_player_info, s_battle_start, s_score_change,
     p_star_info, s_battle_info, c_single_game, c_finish_tip,
     s_single_game, s_globle_goal, s_single_game_end,
     c_battle_info, c_match_battle, c_single_game_tip,
     c_catch_mark, s_goal_reward, c_single_game_end,
     s_get_player_id, s_get_goal_reward, c_change_pi_fu,
     s_change_pi_fu, c_heart, p_rank, s_rank_info,
     c_goal_reward, s_battle_end, c_friend_battle_invite,
     c_use_skill, c_finish_cg, s_use_skill, s_login,
     s_friend_battle_invite, s_buy_pi_fu, c_login,
     c_get_goal_reward].


get_group_names() -> [].


get_msg_or_group_names() ->
    [s_player_info, s_heart, c_rank_info, s_hp_change,
     c_buy_pi_fu, c_get_player_id, c_miss_mark,
     c_player_info, s_battle_start, s_score_change,
     p_star_info, s_battle_info, c_single_game, c_finish_tip,
     s_single_game, s_globle_goal, s_single_game_end,
     c_battle_info, c_match_battle, c_single_game_tip,
     c_catch_mark, s_goal_reward, c_single_game_end,
     s_get_player_id, s_get_goal_reward, c_change_pi_fu,
     s_change_pi_fu, c_heart, p_rank, s_rank_info,
     c_goal_reward, s_battle_end, c_friend_battle_invite,
     c_use_skill, c_finish_cg, s_use_skill, s_login,
     s_friend_battle_invite, s_buy_pi_fu, c_login,
     c_get_goal_reward].


get_enum_names() -> [msgID].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(s_player_info) ->
    [#field{name = total_exp, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = cur_pi_fu, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = have_pi_fu, fnum = 3, rnum = 4,
	    type = uint32, occurrence = repeated, opts = []},
     #field{name = skills, fnum = 4, rnum = 5, type = uint32,
	    occurrence = repeated, opts = []},
     #field{name = gold, fnum = 5, rnum = 6, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_heart) -> [];
find_msg_def(c_rank_info) ->
    [#field{name = tag, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = rank, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_hp_change) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = hp, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_buy_pi_fu) ->
    [#field{name = pi_fu, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_get_player_id) ->
    [#field{name = code, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(c_miss_mark) -> [];
find_msg_def(c_player_info) -> [];
find_msg_def(s_battle_start) ->
    [#field{name = target_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = target_star, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = hp, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []},
     #field{name = target_name, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = target_head, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []},
     #field{name = target_gender, fnum = 6, rnum = 7,
	    type = string, occurrence = required, opts = []}];
find_msg_def(s_score_change) ->
    [#field{name = score, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(p_star_info) ->
    [#field{name = star_lv, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = count, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_battle_info) ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = fight_count, fnum = 3, rnum = 4,
	    type = uint32, occurrence = required, opts = []},
     #field{name = add_second, fnum = 4, rnum = 5,
	    type = uint32, occurrence = required, opts = []},
     #field{name = info, fnum = 5, rnum = 6,
	    type = {msg, p_star_info}, occurrence = repeated,
	    opts = []},
     #field{name = match_second, fnum = 6, rnum = 7,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(c_single_game) -> [];
find_msg_def(c_finish_tip) -> [];
find_msg_def(s_single_game) ->
    [#field{name = stage, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = skill, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = is_load_tip, fnum = 3, rnum = 4,
	    type = uint32, occurrence = required, opts = []},
     #field{name = cur_pi_fu, fnum = 4, rnum = 5,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(s_globle_goal) ->
    [#field{name = save_total, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = need_save, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(s_single_game_end) ->
    [#field{name = result, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = is_first, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = total_score, fnum = 3, rnum = 4,
	    type = uint32, occurrence = required, opts = []},
     #field{name = total_exp, fnum = 4, rnum = 5,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(c_battle_info) -> [];
find_msg_def(c_match_battle) -> [];
find_msg_def(c_single_game_tip) -> [];
find_msg_def(c_catch_mark) ->
    [#field{name = combo, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = big_skill, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(s_goal_reward) ->
    [#field{name = can_reward, fnum = 1, rnum = 2,
	    type = uint32, occurrence = repeated, opts = []},
     #field{name = geted_reward, fnum = 2, rnum = 3,
	    type = uint32, occurrence = repeated, opts = []}];
find_msg_def(c_single_game_end) ->
    [#field{name = score, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = exp, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = gold, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_get_player_id) ->
    [#field{name = player_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(s_get_goal_reward) ->
    [#field{name = reward_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = result, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_change_pi_fu) ->
    [#field{name = pi_fu, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_change_pi_fu) ->
    [#field{name = pi_fu, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = result, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_heart) -> [];
find_msg_def(p_rank) ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = rank, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []},
     #field{name = title, fnum = 4, rnum = 5, type = uint32,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = head, fnum = 6, rnum = 7, type = string,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 7, rnum = 8, type = string,
	    occurrence = required, opts = []}];
find_msg_def(s_rank_info) ->
    [#field{name = tag, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = rank_info, fnum = 2, rnum = 3,
	    type = {msg, p_rank}, occurrence = repeated,
	    opts = []}];
find_msg_def(c_goal_reward) -> [];
find_msg_def(s_battle_end) ->
    [#field{name = battle_result, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = star, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_friend_battle_invite) -> [];
find_msg_def(c_use_skill) ->
    [#field{name = skill, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_finish_cg) -> [];
find_msg_def(s_use_skill) ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = skill, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(s_login) ->
    [#field{name = player_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = is_load_cg, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = is_load_tip, fnum = 3, rnum = 4,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(s_friend_battle_invite) ->
    [#field{name = result, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = invite_code, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(s_buy_pi_fu) ->
    [#field{name = pi_fu, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = result, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def(c_login) ->
    [#field{name = player_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = head, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = city, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = province, fnum = 6, rnum = 7,
	    type = string, occurrence = required, opts = []},
     #field{name = country, fnum = 7, rnum = 8,
	    type = string, occurrence = required, opts = []}];
find_msg_def(c_get_goal_reward) ->
    [#field{name = reward_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(msgID) ->
    [{none, 0}, {c_get_player_id, 1001},
     {s_get_player_id, 1002}, {c_login, 1003},
     {s_login, 1004}, {s_globle_goal, 1005}, {c_heart, 1006},
     {s_heart, 1007}, {c_finish_cg, 1008},
     {c_finish_tip, 1009}, {c_player_info, 1101},
     {s_player_info, 1102}, {c_buy_pi_fu, 1103},
     {s_buy_pi_fu, 1104}, {c_change_pi_fu, 1105},
     {s_change_pi_fu, 1106}, {c_goal_reward, 1107},
     {s_goal_reward, 1108}, {c_get_goal_reward, 1109},
     {s_get_goal_reward, 1110}, {c_single_game, 1201},
     {s_single_game, 1202}, {c_single_game_end, 1203},
     {s_single_game_end, 1204}, {c_single_game_tip, 1205},
     {c_rank_info, 1301}, {s_rank_info, 1302},
     {c_friend_battle_invite, 1401},
     {s_friend_battle_invite, 1402}, {c_match_battle, 1403},
     {s_battle_start, 1404}, {c_catch_mark, 1405},
     {c_miss_mark, 1406}, {c_use_skill, 1407},
     {s_use_skill, 1408}, {s_score_change, 1409},
     {s_hp_change, 1410}, {s_battle_end, 1411},
     {c_battle_info, 1412}, {s_battle_info, 1413}];
find_enum_def(_) -> error.


enum_symbol_by_value(msgID, Value) ->
    enum_symbol_by_value_msgID(Value).


enum_value_by_symbol(msgID, Sym) ->
    enum_value_by_symbol_msgID(Sym).


enum_symbol_by_value_msgID(0) -> none;
enum_symbol_by_value_msgID(1001) -> c_get_player_id;
enum_symbol_by_value_msgID(1002) -> s_get_player_id;
enum_symbol_by_value_msgID(1003) -> c_login;
enum_symbol_by_value_msgID(1004) -> s_login;
enum_symbol_by_value_msgID(1005) -> s_globle_goal;
enum_symbol_by_value_msgID(1006) -> c_heart;
enum_symbol_by_value_msgID(1007) -> s_heart;
enum_symbol_by_value_msgID(1008) -> c_finish_cg;
enum_symbol_by_value_msgID(1009) -> c_finish_tip;
enum_symbol_by_value_msgID(1101) -> c_player_info;
enum_symbol_by_value_msgID(1102) -> s_player_info;
enum_symbol_by_value_msgID(1103) -> c_buy_pi_fu;
enum_symbol_by_value_msgID(1104) -> s_buy_pi_fu;
enum_symbol_by_value_msgID(1105) -> c_change_pi_fu;
enum_symbol_by_value_msgID(1106) -> s_change_pi_fu;
enum_symbol_by_value_msgID(1107) -> c_goal_reward;
enum_symbol_by_value_msgID(1108) -> s_goal_reward;
enum_symbol_by_value_msgID(1109) -> c_get_goal_reward;
enum_symbol_by_value_msgID(1110) -> s_get_goal_reward;
enum_symbol_by_value_msgID(1201) -> c_single_game;
enum_symbol_by_value_msgID(1202) -> s_single_game;
enum_symbol_by_value_msgID(1203) -> c_single_game_end;
enum_symbol_by_value_msgID(1204) -> s_single_game_end;
enum_symbol_by_value_msgID(1205) -> c_single_game_tip;
enum_symbol_by_value_msgID(1301) -> c_rank_info;
enum_symbol_by_value_msgID(1302) -> s_rank_info;
enum_symbol_by_value_msgID(1401) ->
    c_friend_battle_invite;
enum_symbol_by_value_msgID(1402) ->
    s_friend_battle_invite;
enum_symbol_by_value_msgID(1403) -> c_match_battle;
enum_symbol_by_value_msgID(1404) -> s_battle_start;
enum_symbol_by_value_msgID(1405) -> c_catch_mark;
enum_symbol_by_value_msgID(1406) -> c_miss_mark;
enum_symbol_by_value_msgID(1407) -> c_use_skill;
enum_symbol_by_value_msgID(1408) -> s_use_skill;
enum_symbol_by_value_msgID(1409) -> s_score_change;
enum_symbol_by_value_msgID(1410) -> s_hp_change;
enum_symbol_by_value_msgID(1411) -> s_battle_end;
enum_symbol_by_value_msgID(1412) -> c_battle_info;
enum_symbol_by_value_msgID(1413) -> s_battle_info.


enum_value_by_symbol_msgID(none) -> 0;
enum_value_by_symbol_msgID(c_get_player_id) -> 1001;
enum_value_by_symbol_msgID(s_get_player_id) -> 1002;
enum_value_by_symbol_msgID(c_login) -> 1003;
enum_value_by_symbol_msgID(s_login) -> 1004;
enum_value_by_symbol_msgID(s_globle_goal) -> 1005;
enum_value_by_symbol_msgID(c_heart) -> 1006;
enum_value_by_symbol_msgID(s_heart) -> 1007;
enum_value_by_symbol_msgID(c_finish_cg) -> 1008;
enum_value_by_symbol_msgID(c_finish_tip) -> 1009;
enum_value_by_symbol_msgID(c_player_info) -> 1101;
enum_value_by_symbol_msgID(s_player_info) -> 1102;
enum_value_by_symbol_msgID(c_buy_pi_fu) -> 1103;
enum_value_by_symbol_msgID(s_buy_pi_fu) -> 1104;
enum_value_by_symbol_msgID(c_change_pi_fu) -> 1105;
enum_value_by_symbol_msgID(s_change_pi_fu) -> 1106;
enum_value_by_symbol_msgID(c_goal_reward) -> 1107;
enum_value_by_symbol_msgID(s_goal_reward) -> 1108;
enum_value_by_symbol_msgID(c_get_goal_reward) -> 1109;
enum_value_by_symbol_msgID(s_get_goal_reward) -> 1110;
enum_value_by_symbol_msgID(c_single_game) -> 1201;
enum_value_by_symbol_msgID(s_single_game) -> 1202;
enum_value_by_symbol_msgID(c_single_game_end) -> 1203;
enum_value_by_symbol_msgID(s_single_game_end) -> 1204;
enum_value_by_symbol_msgID(c_single_game_tip) -> 1205;
enum_value_by_symbol_msgID(c_rank_info) -> 1301;
enum_value_by_symbol_msgID(s_rank_info) -> 1302;
enum_value_by_symbol_msgID(c_friend_battle_invite) ->
    1401;
enum_value_by_symbol_msgID(s_friend_battle_invite) ->
    1402;
enum_value_by_symbol_msgID(c_match_battle) -> 1403;
enum_value_by_symbol_msgID(s_battle_start) -> 1404;
enum_value_by_symbol_msgID(c_catch_mark) -> 1405;
enum_value_by_symbol_msgID(c_miss_mark) -> 1406;
enum_value_by_symbol_msgID(c_use_skill) -> 1407;
enum_value_by_symbol_msgID(s_use_skill) -> 1408;
enum_value_by_symbol_msgID(s_score_change) -> 1409;
enum_value_by_symbol_msgID(s_hp_change) -> 1410;
enum_value_by_symbol_msgID(s_battle_end) -> 1411;
enum_value_by_symbol_msgID(c_battle_info) -> 1412;
enum_value_by_symbol_msgID(s_battle_info) -> 1413.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.1.9".

gpb_version_as_list() ->
    [4,1,9].
